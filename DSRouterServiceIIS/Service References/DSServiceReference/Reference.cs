//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSRouterServiceIIS.DSServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSTagValue", Namespace="http://schemas.datacontract.org/2004/07/WcfDataServer_Lib")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(uint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[][]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSAuthResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.AuthResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSOscillogram))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventDataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDataFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.MemoryStream))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.IO.Stream))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.MarshalByRefObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.LstError))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo))]
    public partial class DSTagValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint VarQualityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object VarValueAsObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint VarQuality {
            get {
                return this.VarQualityField;
            }
            set {
                if ((this.VarQualityField.Equals(value) != true)) {
                    this.VarQualityField = value;
                    this.RaisePropertyChanged("VarQuality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object VarValueAsObject {
            get {
                return this.VarValueAsObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.VarValueAsObjectField, value) != true)) {
                    this.VarValueAsObjectField = value;
                    this.RaisePropertyChanged("VarValueAsObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSAuthResult", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSAuthResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DSRouterServiceIIS.DSServiceReference.AuthResult AuthResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DSRouterServiceIIS.DSServiceReference.DSUser DSUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DSRouterServiceIIS.DSServiceReference.AuthResult AuthResult {
            get {
                return this.AuthResultField;
            }
            set {
                if ((this.AuthResultField.Equals(value) != true)) {
                    this.AuthResultField = value;
                    this.RaisePropertyChanged("AuthResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DSRouterServiceIIS.DSServiceReference.DSUser DSUser {
            get {
                return this.DSUserField;
            }
            set {
                if ((object.ReferenceEquals(this.DSUserField, value) != true)) {
                    this.DSUserField = value;
                    this.RaisePropertyChanged("DSUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthResult", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    public enum AuthResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongLoginOrPassword = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConnectionToDb = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConnectionToDs = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSUser", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DSRouterServiceIIS.DSServiceReference.DSUserGroup DsUserGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DSRouterServiceIIS.DSServiceReference.DSUserGroup DsUserGroup {
            get {
                return this.DsUserGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.DsUserGroupField, value) != true)) {
                    this.DsUserGroupField = value;
                    this.RaisePropertyChanged("DsUserGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditDateTime {
            get {
                return this.EditDateTimeField;
            }
            set {
                if ((this.EditDateTimeField.Equals(value) != true)) {
                    this.EditDateTimeField = value;
                    this.RaisePropertyChanged("EditDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserComment {
            get {
                return this.UserCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.UserCommentField, value) != true)) {
                    this.UserCommentField = value;
                    this.RaisePropertyChanged("UserComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSUserGroup", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSUserGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupRightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditDateTime {
            get {
                return this.EditDateTimeField;
            }
            set {
                if ((this.EditDateTimeField.Equals(value) != true)) {
                    this.EditDateTimeField = value;
                    this.RaisePropertyChanged("EditDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupComment {
            get {
                return this.GroupCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupCommentField, value) != true)) {
                    this.GroupCommentField = value;
                    this.RaisePropertyChanged("GroupComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupRight {
            get {
                return this.GroupRightField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupRightField, value) != true)) {
                    this.GroupRightField = value;
                    this.RaisePropertyChanged("GroupRight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSEventValue", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSEventValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DevGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventDataIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventSourceCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventSourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNeedReceiptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReceiptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReceiptTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DevGuid {
            get {
                return this.DevGuidField;
            }
            set {
                if ((this.DevGuidField.Equals(value) != true)) {
                    this.DevGuidField = value;
                    this.RaisePropertyChanged("DevGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventDataID {
            get {
                return this.EventDataIDField;
            }
            set {
                if ((this.EventDataIDField.Equals(value) != true)) {
                    this.EventDataIDField = value;
                    this.RaisePropertyChanged("EventDataID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventSourceComment {
            get {
                return this.EventSourceCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSourceCommentField, value) != true)) {
                    this.EventSourceCommentField = value;
                    this.RaisePropertyChanged("EventSourceComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventSourceName {
            get {
                return this.EventSourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSourceNameField, value) != true)) {
                    this.EventSourceNameField = value;
                    this.RaisePropertyChanged("EventSourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventText {
            get {
                return this.EventTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTextField, value) != true)) {
                    this.EventTextField = value;
                    this.RaisePropertyChanged("EventText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTime {
            get {
                return this.EventTimeField;
            }
            set {
                if ((this.EventTimeField.Equals(value) != true)) {
                    this.EventTimeField = value;
                    this.RaisePropertyChanged("EventTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNeedReceipt {
            get {
                return this.IsNeedReceiptField;
            }
            set {
                if ((this.IsNeedReceiptField.Equals(value) != true)) {
                    this.IsNeedReceiptField = value;
                    this.RaisePropertyChanged("IsNeedReceipt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReceipted {
            get {
                return this.IsReceiptedField;
            }
            set {
                if ((this.IsReceiptedField.Equals(value) != true)) {
                    this.IsReceiptedField = value;
                    this.RaisePropertyChanged("IsReceipted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptMessage {
            get {
                return this.ReceiptMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptMessageField, value) != true)) {
                    this.ReceiptMessageField = value;
                    this.RaisePropertyChanged("ReceiptMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReceiptTime {
            get {
                return this.ReceiptTimeField;
            }
            set {
                if ((this.ReceiptTimeField.Equals(value) != true)) {
                    this.ReceiptTimeField = value;
                    this.RaisePropertyChanged("ReceiptTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptUser {
            get {
                return this.ReceiptUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptUserField, value) != true)) {
                    this.ReceiptUserField = value;
                    this.RaisePropertyChanged("ReceiptUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSOscillogram", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSOscillogram : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[][] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DSRouterServiceIIS.DSServiceReference.DSEventDataType OscillogramTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[][] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DSRouterServiceIIS.DSServiceReference.DSEventDataType OscillogramType {
            get {
                return this.OscillogramTypeField;
            }
            set {
                if ((this.OscillogramTypeField.Equals(value) != true)) {
                    this.OscillogramTypeField = value;
                    this.RaisePropertyChanged("OscillogramType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceComment {
            get {
                return this.SourceCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceCommentField, value) != true)) {
                    this.SourceCommentField = value;
                    this.RaisePropertyChanged("SourceComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSEventDataType", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    public enum DSEventDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ustavki = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alarm = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Storage = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Oscillogram = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Diagramm = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BMCSJournal = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USOJournal = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OscillogramSirius2 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Siriu2Journal = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OscillogramEkra = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OscillogramBresler = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OscillogramBMRZ100 = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSSettingsSet", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSSettingsSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingsSetCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SettingsSetDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SettingsSetIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingsSetComment {
            get {
                return this.SettingsSetCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsSetCommentField, value) != true)) {
                    this.SettingsSetCommentField = value;
                    this.RaisePropertyChanged("SettingsSetComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SettingsSetDateTime {
            get {
                return this.SettingsSetDateTimeField;
            }
            set {
                if ((this.SettingsSetDateTimeField.Equals(value) != true)) {
                    this.SettingsSetDateTimeField = value;
                    this.RaisePropertyChanged("SettingsSetDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SettingsSetID {
            get {
                return this.SettingsSetIDField;
            }
            set {
                if ((this.SettingsSetIDField.Equals(value) != true)) {
                    this.SettingsSetIDField = value;
                    this.RaisePropertyChanged("SettingsSetID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSDocumentDataValue", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSDocumentDataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DocumentAddDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentUserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DocumentAddDate {
            get {
                return this.DocumentAddDateField;
            }
            set {
                if ((this.DocumentAddDateField.Equals(value) != true)) {
                    this.DocumentAddDateField = value;
                    this.RaisePropertyChanged("DocumentAddDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentComment {
            get {
                return this.DocumentCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentCommentField, value) != true)) {
                    this.DocumentCommentField = value;
                    this.RaisePropertyChanged("DocumentComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentFileName {
            get {
                return this.DocumentFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentFileNameField, value) != true)) {
                    this.DocumentFileNameField = value;
                    this.RaisePropertyChanged("DocumentFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentUserName {
            get {
                return this.DocumentUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentUserNameField, value) != true)) {
                    this.DocumentUserNameField = value;
                    this.RaisePropertyChanged("DocumentUserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSDataFile", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class DSDataFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LstError", Namespace="http://schemas.datacontract.org/2004/07/WcfDataServer_Lib")]
    [System.SerializableAttribute()]
    public partial class LstError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] lstErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] lstError {
            get {
                return this.lstErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.lstErrorField, value) != true)) {
                    this.lstErrorField = value;
                    this.RaisePropertyChanged("lstError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSUserSessionInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfDataServer_Lib")]
    [System.SerializableAttribute()]
    public partial class DSUserSessionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserMacAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserIpAddress {
            get {
                return this.UserIpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIpAddressField, value) != true)) {
                    this.UserIpAddressField = value;
                    this.RaisePropertyChanged("UserIpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserMacAddress {
            get {
                return this.UserMacAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.UserMacAddressField, value) != true)) {
                    this.UserMacAddressField = value;
                    this.RaisePropertyChanged("UserMacAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DSServiceReference.IWcfDataServer", CallbackContract=typeof(DSRouterServiceIIS.DSServiceReference.IWcfDataServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IWcfDataServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/RunCMD", ReplyAction="http://tempuri.org/IWcfDataServer/RunCMDResponse")]
        bool RunCMD(ushort numksdu, uint numvtu, uint tagguid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/RunCMD", ReplyAction="http://tempuri.org/IWcfDataServer/RunCMDResponse")]
        System.IAsyncResult BeginRunCMD(ushort numksdu, uint numvtu, uint tagguid, byte[] arr, System.AsyncCallback callback, object asyncState);
        
        bool EndRunCMD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSGUIDResponse")]
        string GetDSGUID();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSGUIDResponse")]
        System.IAsyncResult BeginGetDSGUID(System.AsyncCallback callback, object asyncState);
        
        string EndGetDSGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSINFO", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSINFOResponse")]
        string GetDSINFO();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSINFO", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSINFOResponse")]
        System.IAsyncResult BeginGetDSINFO(System.AsyncCallback callback, object asyncState);
        
        string EndGetDSINFO(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSConfigFile", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSConfigFileResponse")]
        System.IO.Stream GetDSConfigFile();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSConfigFile", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSConfigFileResponse")]
        System.IAsyncResult BeginGetDSConfigFile(System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndGetDSConfigFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetSourceGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetSourceGUIDsResponse")]
        string GetSourceGUIDs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetSourceGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetSourceGUIDsResponse")]
        System.IAsyncResult BeginGetSourceGUIDs(System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetSourceName", ReplyAction="http://tempuri.org/IWcfDataServer/GetSourceNameResponse")]
        string GetSourceName(ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetSourceName", ReplyAction="http://tempuri.org/IWcfDataServer/GetSourceNameResponse")]
        System.IAsyncResult BeginGetSourceName(ushort SrcGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetSourceName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetECUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetECUGUIDsResponse")]
        string GetECUGUIDs(ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetECUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetECUGUIDsResponse")]
        System.IAsyncResult BeginGetECUGUIDs(ushort SrcGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetECUGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetECUName", ReplyAction="http://tempuri.org/IWcfDataServer/GetECUNameResponse")]
        string GetECUName(ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetECUName", ReplyAction="http://tempuri.org/IWcfDataServer/GetECUNameResponse")]
        System.IAsyncResult BeginGetECUName(ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetECUName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetSrcEcuRTUGUIDsResponse")]
        string GetSrcEcuRTUGUIDs(ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetSrcEcuRTUGUIDsResponse")]
        System.IAsyncResult BeginGetSrcEcuRTUGUIDs(ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetSrcEcuRTUGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUGUIDsResponse")]
        string GetRTUGUIDs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUGUIDsResponse")]
        System.IAsyncResult BeginGetRTUGUIDs(System.AsyncCallback callback, object asyncState);
        
        string EndGetRTUGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUTypeName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTypeNameResponse")]
        string GetRTUTypeName(uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUTypeName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTypeNameResponse")]
        System.IAsyncResult BeginGetRTUTypeName(uint RtuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetRTUTypeName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUDescription", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUDescriptionResponse")]
        string GetRTUDescription(uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUDescription", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUDescriptionResponse")]
        System.IAsyncResult BeginGetRTUDescription(uint RtuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetRTUDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/IsRTUEnable", ReplyAction="http://tempuri.org/IWcfDataServer/IsRTUEnableResponse")]
        bool IsRTUEnable(uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/IsRTUEnable", ReplyAction="http://tempuri.org/IWcfDataServer/IsRTUEnableResponse")]
        System.IAsyncResult BeginIsRTUEnable(uint RtuGuid, System.AsyncCallback callback, object asyncState);
        
        bool EndIsRTUEnable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetGroupGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetGroupGUIDsResponse")]
        string GetGroupGUIDs(uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetGroupGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetGroupGUIDsResponse")]
        System.IAsyncResult BeginGetGroupGUIDs(uint RtuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetGroupGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IWcfDataServer/GetSubGroupGUIDsInGroupResponse")]
        string GetSubGroupGUIDsInGroup(uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IWcfDataServer/GetSubGroupGUIDsInGroupResponse")]
        System.IAsyncResult BeginGetSubGroupGUIDsInGroup(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetSubGroupGUIDsInGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUGroupName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUGroupNameResponse")]
        string GetRTUGroupName(uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUGroupName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUGroupNameResponse")]
        System.IAsyncResult BeginGetRTUGroupName(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetRTUGroupName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/IsGroupEnable", ReplyAction="http://tempuri.org/IWcfDataServer/IsGroupEnableResponse")]
        bool IsGroupEnable(uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/IsGroupEnable", ReplyAction="http://tempuri.org/IWcfDataServer/IsGroupEnableResponse")]
        System.IAsyncResult BeginIsGroupEnable(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
        
        bool EndIsGroupEnable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRtuTagGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRtuTagGUIDsResponse")]
        string GetRtuTagGUIDs(uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRtuTagGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRtuTagGUIDsResponse")]
        System.IAsyncResult BeginGetRtuTagGUIDs(uint RtuGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetRtuTagGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRtuGroupTagGUIDsResponse")]
        string GetRtuGroupTagGUIDs(uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IWcfDataServer/GetRtuGroupTagGUIDsResponse")]
        System.IAsyncResult BeginGetRtuGroupTagGUIDs(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
        
        string EndGetRtuGroupTagGUIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUTagName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTagNameResponse")]
        string GetRTUTagName(uint RtuGuid, uint TagGUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUTagName", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTagNameResponse")]
        System.IAsyncResult BeginGetRTUTagName(uint RtuGuid, uint TagGUID, System.AsyncCallback callback, object asyncState);
        
        string EndGetRTUTagName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetRTUTagsValue", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTagsValueResponse")]
        byte[] GetRTUTagsValue(uint RtuGuid, byte[] request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetRTUTagsValue", ReplyAction="http://tempuri.org/IWcfDataServer/GetRTUTagsValueResponse")]
        System.IAsyncResult BeginGetRTUTagsValue(uint RtuGuid, byte[] request, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetRTUTagsValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetTagsValue", ReplyAction="http://tempuri.org/IWcfDataServer/GetTagsValueResponse")]
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetTagsValue(string[] request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetTagsValue", ReplyAction="http://tempuri.org/IWcfDataServer/GetTagsValueResponse")]
        System.IAsyncResult BeginGetTagsValue(string[] request, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetTagsValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/SubscribeRTUTags", ReplyAction="http://tempuri.org/IWcfDataServer/SubscribeRTUTagsResponse")]
        void SubscribeRTUTags(string[] request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SubscribeRTUTags", ReplyAction="http://tempuri.org/IWcfDataServer/SubscribeRTUTagsResponse")]
        System.IAsyncResult BeginSubscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState);
        
        void EndSubscribeRTUTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/UnscribeRTUTags")]
        void UnscribeRTUTags(string[] request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/UnscribeRTUTags")]
        System.IAsyncResult BeginUnscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState);
        
        void EndUnscribeRTUTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSValueAsPartialByteBuffer", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSValueAsPartialByteBufferResponse")]
        System.IO.MemoryStream GetDSValueAsPartialByteBuffer(byte[] arr, int currentNumberPacket, int packetCount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSValueAsPartialByteBuffer", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSValueAsPartialByteBufferResponse")]
        System.IAsyncResult BeginGetDSValueAsPartialByteBuffer(byte[] arr, int currentNumberPacket, int packetCount, System.AsyncCallback callback, object asyncState);
        
        System.IO.MemoryStream EndGetDSValueAsPartialByteBuffer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSValueAsByteBufferResponse")]
        System.IO.MemoryStream GetDSValueAsByteBuffer(byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSValueAsByteBufferResponse")]
        System.IAsyncResult BeginGetDSValueAsByteBuffer(byte[] arr, System.AsyncCallback callback, object asyncState);
        
        System.IO.MemoryStream EndGetDSValueAsByteBuffer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSOscByIdInBDResponse")]
        System.IO.MemoryStream GetDSOscByIdInBD(byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSOscByIdInBDResponse")]
        System.IAsyncResult BeginGetDSOscByIdInBD(byte[] pq, System.AsyncCallback callback, object asyncState);
        
        System.IO.MemoryStream EndGetDSOscByIdInBD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/SetReq2ArhivInfo", ReplyAction="http://tempuri.org/IWcfDataServer/SetReq2ArhivInfoResponse")]
        void SetReq2ArhivInfo(byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SetReq2ArhivInfo", ReplyAction="http://tempuri.org/IWcfDataServer/SetReq2ArhivInfoResponse")]
        System.IAsyncResult BeginSetReq2ArhivInfo(byte[] pq, System.AsyncCallback callback, object asyncState);
        
        void EndSetReq2ArhivInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/RunCMDMOA", ReplyAction="http://tempuri.org/IWcfDataServer/RunCMDMOAResponse")]
        System.IO.MemoryStream RunCMDMOA(byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/RunCMDMOA", ReplyAction="http://tempuri.org/IWcfDataServer/RunCMDMOAResponse")]
        System.IAsyncResult BeginRunCMDMOA(byte[] pq, System.AsyncCallback callback, object asyncState);
        
        System.IO.MemoryStream EndRunCMDMOA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSLastErrorsGUIDResponse")]
        DSRouterServiceIIS.DSServiceReference.LstError GetDSLastErrorsGUID();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSLastErrorsGUIDResponse")]
        System.IAsyncResult BeginGetDSLastErrorsGUID(System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.LstError EndGetDSLastErrorsGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSLastErrorGUIDResponse")]
        string GetDSLastErrorGUID();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSLastErrorGUIDResponse")]
        System.IAsyncResult BeginGetDSLastErrorGUID(System.AsyncCallback callback, object asyncState);
        
        string EndGetDSLastErrorGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSErrorTextByErrorGUIDResponse")]
        string GetDSErrorTextByErrorGUID(string errorGUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDSErrorTextByErrorGUIDResponse")]
        System.IAsyncResult BeginGetDSErrorTextByErrorGUID(string errorGUID, System.AsyncCallback callback, object asyncState);
        
        string EndGetDSErrorTextByErrorGUID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/AcknowledgementOfErrors")]
        void AcknowledgementOfErrors();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/AcknowledgementOfErrors")]
        System.IAsyncResult BeginAcknowledgementOfErrors(System.AsyncCallback callback, object asyncState);
        
        void EndAcknowledgementOfErrors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/RegisterForErrorEvent")]
        void RegisterForErrorEvent(string keyticker);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/RegisterForErrorEvent")]
        System.IAsyncResult BeginRegisterForErrorEvent(string keyticker, System.AsyncCallback callback, object asyncState);
        
        void EndRegisterForErrorEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/Ping")]
        void Ping();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/Ping")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        void EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/SetTagValueFromHMI")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(uint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSOscillogram))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDataFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.LstError))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo))]
        void SetTagValueFromHMI(string idTag, object valinobject);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SetTagValueFromHMI")]
        System.IAsyncResult BeginSetTagValueFromHMI(string idTag, object valinobject, System.AsyncCallback callback, object asyncState);
        
        void EndSetTagValueFromHMI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/ReSetTagValueFromHMI")]
        void ReSetTagValueFromHMI(string idTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/ReSetTagValueFromHMI")]
        System.IAsyncResult BeginReSetTagValueFromHMI(string idTag, System.AsyncCallback callback, object asyncState);
        
        void EndReSetTagValueFromHMI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/GetTagAnalogTransformationRatioResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(uint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSOscillogram))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDataFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.LstError))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo))]
        object GetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/GetTagAnalogTransformationRatioResponse")]
        System.IAsyncResult BeginGetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState);
        
        object EndGetTagAnalogTransformationRatio(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/SetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/SetTagAnalogTransformationRatioResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(uint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSOscillogram))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDataFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.LstError))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo))]
        void SetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/SetTagAnalogTransformationRatioResponse")]
        System.IAsyncResult BeginSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio, System.AsyncCallback callback, object asyncState);
        
        void EndSetTagAnalogTransformationRatio(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/ReSetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/ReSetTagAnalogTransformationRatioResponse")]
        void ReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/ReSetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IWcfDataServer/ReSetTagAnalogTransformationRatioResponse")]
        System.IAsyncResult BeginReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState);
        
        void EndReSetTagAnalogTransformationRatio(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/IsInverseDiscretTag", ReplyAction="http://tempuri.org/IWcfDataServer/IsInverseDiscretTagResponse")]
        bool IsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/IsInverseDiscretTag", ReplyAction="http://tempuri.org/IWcfDataServer/IsInverseDiscretTagResponse")]
        System.IAsyncResult BeginIsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState);
        
        bool EndIsInverseDiscretTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/InverseDiscretTag", ReplyAction="http://tempuri.org/IWcfDataServer/InverseDiscretTagResponse")]
        void InverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/InverseDiscretTag", ReplyAction="http://tempuri.org/IWcfDataServer/InverseDiscretTagResponse")]
        System.IAsyncResult BeginInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState);
        
        void EndInverseDiscretTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/Authorization", ReplyAction="http://tempuri.org/IWcfDataServer/AuthorizationResponse")]
        DSRouterServiceIIS.DSServiceReference.DSAuthResult Authorization(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/Authorization", ReplyAction="http://tempuri.org/IWcfDataServer/AuthorizationResponse")]
        System.IAsyncResult BeginAuthorization(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSAuthResult EndAuthorization(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetUsersList", ReplyAction="http://tempuri.org/IWcfDataServer/GetUsersListResponse")]
        DSRouterServiceIIS.DSServiceReference.DSUser[] GetUsersList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetUsersList", ReplyAction="http://tempuri.org/IWcfDataServer/GetUsersListResponse")]
        System.IAsyncResult BeginGetUsersList(System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSUser[] EndGetUsersList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetUserGroupsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetUserGroupsListResponse")]
        DSRouterServiceIIS.DSServiceReference.DSUserGroup[] GetUserGroupsList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetUserGroupsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetUserGroupsListResponse")]
        System.IAsyncResult BeginGetUserGroupsList(System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSUserGroup[] EndGetUserGroupsList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/CreateUserGroup", ReplyAction="http://tempuri.org/IWcfDataServer/CreateUserGroupResponse")]
        bool CreateUserGroup(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/CreateUserGroup", ReplyAction="http://tempuri.org/IWcfDataServer/CreateUserGroupResponse")]
        System.IAsyncResult BeginCreateUserGroup(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateUserGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/CreateUser", ReplyAction="http://tempuri.org/IWcfDataServer/CreateUserResponse")]
        bool CreateUser(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/CreateUser", ReplyAction="http://tempuri.org/IWcfDataServer/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetEvents", ReplyAction="http://tempuri.org/IWcfDataServer/GetEventsResponse")]
        DSRouterServiceIIS.DSServiceReference.DSEventValue[] GetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetEvents", ReplyAction="http://tempuri.org/IWcfDataServer/GetEventsResponse")]
        System.IAsyncResult BeginGetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSEventValue[] EndGetEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetOscillogramByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetOscillogramByIDResponse")]
        DSRouterServiceIIS.DSServiceReference.DSOscillogram GetOscillogramByID(int eventDataID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetOscillogramByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetOscillogramByIDResponse")]
        System.IAsyncResult BeginGetOscillogramByID(int eventDataID, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSOscillogram EndGetOscillogramByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetHistoricalDataByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetHistoricalDataByIDResponse")]
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetHistoricalDataByID(int dataID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetHistoricalDataByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetHistoricalDataByIDResponse")]
        System.IAsyncResult BeginGetHistoricalDataByID(int dataID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetHistoricalDataByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/IsNotReceiptedEventsExist", ReplyAction="http://tempuri.org/IWcfDataServer/IsNotReceiptedEventsExistResponse")]
        bool IsNotReceiptedEventsExist();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/IsNotReceiptedEventsExist", ReplyAction="http://tempuri.org/IWcfDataServer/IsNotReceiptedEventsExistResponse")]
        System.IAsyncResult BeginIsNotReceiptedEventsExist(System.AsyncCallback callback, object asyncState);
        
        bool EndIsNotReceiptedEventsExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetNotReceiptedEvents", ReplyAction="http://tempuri.org/IWcfDataServer/GetNotReceiptedEventsResponse")]
        DSRouterServiceIIS.DSServiceReference.DSEventValue[] GetNotReceiptedEvents();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetNotReceiptedEvents", ReplyAction="http://tempuri.org/IWcfDataServer/GetNotReceiptedEventsResponse")]
        System.IAsyncResult BeginGetNotReceiptedEvents(System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSEventValue[] EndGetNotReceiptedEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/ReceiptEvents", ReplyAction="http://tempuri.org/IWcfDataServer/ReceiptEventsResponse")]
        void ReceiptEvents(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/ReceiptEvents", ReplyAction="http://tempuri.org/IWcfDataServer/ReceiptEventsResponse")]
        System.IAsyncResult BeginReceiptEvents(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState);
        
        void EndReceiptEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/ReceiptAllEvents", ReplyAction="http://tempuri.org/IWcfDataServer/ReceiptAllEventsResponse")]
        void ReceiptAllEvents(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/ReceiptAllEvents", ReplyAction="http://tempuri.org/IWcfDataServer/ReceiptAllEventsResponse")]
        System.IAsyncResult BeginReceiptAllEvents(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState);
        
        void EndReceiptAllEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetSettingsSetsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetSettingsSetsListResponse")]
        DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] GetSettingsSetsList(uint devGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetSettingsSetsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetSettingsSetsListResponse")]
        System.IAsyncResult BeginGetSettingsSetsList(uint devGuid, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] EndGetSettingsSetsList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetValuesFromSettingsSet", ReplyAction="http://tempuri.org/IWcfDataServer/GetValuesFromSettingsSetResponse")]
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetValuesFromSettingsSet(int settingsSetID, string[] tagsList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetValuesFromSettingsSet", ReplyAction="http://tempuri.org/IWcfDataServer/GetValuesFromSettingsSetResponse")]
        System.IAsyncResult BeginGetValuesFromSettingsSet(int settingsSetID, string[] tagsList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetValuesFromSettingsSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/SaveSettingsToDevice", ReplyAction="http://tempuri.org/IWcfDataServer/SaveSettingsToDeviceResponse")]
        void SaveSettingsToDevice(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SaveSettingsToDevice", ReplyAction="http://tempuri.org/IWcfDataServer/SaveSettingsToDeviceResponse")]
        System.IAsyncResult BeginSaveSettingsToDevice(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues, System.AsyncCallback callback, object asyncState);
        
        void EndSaveSettingsToDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/CommandRun", ReplyAction="http://tempuri.org/IWcfDataServer/CommandRunResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(uint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUser[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserGroup[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSOscillogram))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSDataFile))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.MemoryStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.LstError))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo))]
        void CommandRun(uint devGuid, string commandID, object[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/CommandRun", ReplyAction="http://tempuri.org/IWcfDataServer/CommandRunResponse")]
        System.IAsyncResult BeginCommandRun(uint devGuid, string commandID, object[] parameters, System.AsyncCallback callback, object asyncState);
        
        void EndCommandRun(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDocumentsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetDocumentsListResponse")]
        DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] GetDocumentsList(int devGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDocumentsList", ReplyAction="http://tempuri.org/IWcfDataServer/GetDocumentsListResponse")]
        System.IAsyncResult BeginGetDocumentsList(int devGuid, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] EndGetDocumentsList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/GetDocumentByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDocumentByIDResponse")]
        DSRouterServiceIIS.DSServiceReference.DSDataFile GetDocumentByID(int documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/GetDocumentByID", ReplyAction="http://tempuri.org/IWcfDataServer/GetDocumentByIDResponse")]
        System.IAsyncResult BeginGetDocumentByID(int documentId, System.AsyncCallback callback, object asyncState);
        
        DSRouterServiceIIS.DSServiceReference.DSDataFile EndGetDocumentByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/UploadFileChunk", ReplyAction="http://tempuri.org/IWcfDataServer/UploadFileChunkResponse")]
        bool UploadFileChunk(byte[] fileChunk);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/UploadFileChunk", ReplyAction="http://tempuri.org/IWcfDataServer/UploadFileChunkResponse")]
        System.IAsyncResult BeginUploadFileChunk(byte[] fileChunk, System.AsyncCallback callback, object asyncState);
        
        bool EndUploadFileChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/SaveUploadedFile", ReplyAction="http://tempuri.org/IWcfDataServer/SaveUploadedFileResponse")]
        bool SaveUploadedFile(int devGuid, int userId, string fileName, string fileComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/SaveUploadedFile", ReplyAction="http://tempuri.org/IWcfDataServer/SaveUploadedFileResponse")]
        System.IAsyncResult BeginSaveUploadedFile(int devGuid, int userId, string fileName, string fileComment, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveUploadedFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDataServer/TerminateUploadFileSession", ReplyAction="http://tempuri.org/IWcfDataServer/TerminateUploadFileSessionResponse")]
        void TerminateUploadFileSession();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/TerminateUploadFileSession", ReplyAction="http://tempuri.org/IWcfDataServer/TerminateUploadFileSessionResponse")]
        System.IAsyncResult BeginTerminateUploadFileSession(System.AsyncCallback callback, object asyncState);
        
        void EndTerminateUploadFileSession(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfDataServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/NewErrorEvent")]
        void NewErrorEvent(string codeDataTimeEvent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/NewErrorEvent")]
        System.IAsyncResult BeginNewErrorEvent(string codeDataTimeEvent, System.AsyncCallback callback, object asyncState);
        
        void EndNewErrorEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/Pong")]
        void Pong();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/Pong")]
        System.IAsyncResult BeginPong(System.AsyncCallback callback, object asyncState);
        
        void EndPong(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/NotifyChangedTags")]
        void NotifyChangedTags(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> lstChangedTags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/NotifyChangedTags")]
        System.IAsyncResult BeginNotifyChangedTags(System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> lstChangedTags, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyChangedTags(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfDataServer/NotifyCMDExecuted")]
        void NotifyCMDExecuted(byte[] cmdarray);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWcfDataServer/NotifyCMDExecuted")]
        System.IAsyncResult BeginNotifyCMDExecuted(byte[] cmdarray, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyCMDExecuted(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfDataServerChannel : DSRouterServiceIIS.DSServiceReference.IWcfDataServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunCMDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunCMDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSINFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSINFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSConfigFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSConfigFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSourceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSourceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetECUGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetECUGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetECUNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetECUNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSrcEcuRTUGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSrcEcuRTUGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUTypeNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUTypeNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsRTUEnableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsRTUEnableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSubGroupGUIDsInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSubGroupGUIDsInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsGroupEnableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsGroupEnableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRtuTagGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRtuTagGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRtuGroupTagGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRtuGroupTagGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUTagNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUTagNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTUTagsValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTUTagsValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagsValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagsValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSValueAsPartialByteBufferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSValueAsPartialByteBufferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.MemoryStream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.MemoryStream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSValueAsByteBufferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSValueAsByteBufferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.MemoryStream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.MemoryStream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSOscByIdInBDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSOscByIdInBDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.MemoryStream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.MemoryStream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunCMDMOACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunCMDMOACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.MemoryStream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.MemoryStream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSLastErrorsGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSLastErrorsGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.LstError Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.LstError)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSLastErrorGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSLastErrorGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDSErrorTextByErrorGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDSErrorTextByErrorGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagAnalogTransformationRatioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagAnalogTransformationRatioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsInverseDiscretTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsInverseDiscretTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSAuthResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSAuthResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSUser[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSUser[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserGroupsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserGroupsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSUserGroup[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSUserGroup[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSEventValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOscillogramByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOscillogramByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSOscillogram Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSOscillogram)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHistoricalDataByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoricalDataByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsNotReceiptedEventsExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsNotReceiptedEventsExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotReceiptedEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotReceiptedEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSEventValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSettingsSetsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSettingsSetsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSSettingsSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetValuesFromSettingsSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetValuesFromSettingsSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSDataFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DSRouterServiceIIS.DSServiceReference.DSDataFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUploadedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUploadedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfDataServerClient : System.ServiceModel.DuplexClientBase<DSRouterServiceIIS.DSServiceReference.IWcfDataServer>, DSRouterServiceIIS.DSServiceReference.IWcfDataServer {
        
        private BeginOperationDelegate onBeginRunCMDDelegate;
        
        private EndOperationDelegate onEndRunCMDDelegate;
        
        private System.Threading.SendOrPostCallback onRunCMDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSGUIDDelegate;
        
        private EndOperationDelegate onEndGetDSGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSINFODelegate;
        
        private EndOperationDelegate onEndGetDSINFODelegate;
        
        private System.Threading.SendOrPostCallback onGetDSINFOCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSConfigFileDelegate;
        
        private EndOperationDelegate onEndGetDSConfigFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSConfigFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSourceGUIDsDelegate;
        
        private EndOperationDelegate onEndGetSourceGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSourceNameDelegate;
        
        private EndOperationDelegate onEndGetSourceNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetSourceNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetECUGUIDsDelegate;
        
        private EndOperationDelegate onEndGetECUGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetECUGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetECUNameDelegate;
        
        private EndOperationDelegate onEndGetECUNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetECUNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSrcEcuRTUGUIDsDelegate;
        
        private EndOperationDelegate onEndGetSrcEcuRTUGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSrcEcuRTUGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUGUIDsDelegate;
        
        private EndOperationDelegate onEndGetRTUGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUTypeNameDelegate;
        
        private EndOperationDelegate onEndGetRTUTypeNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUTypeNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUDescriptionDelegate;
        
        private EndOperationDelegate onEndGetRTUDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsRTUEnableDelegate;
        
        private EndOperationDelegate onEndIsRTUEnableDelegate;
        
        private System.Threading.SendOrPostCallback onIsRTUEnableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupGUIDsDelegate;
        
        private EndOperationDelegate onEndGetGroupGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSubGroupGUIDsInGroupDelegate;
        
        private EndOperationDelegate onEndGetSubGroupGUIDsInGroupDelegate;
        
        private System.Threading.SendOrPostCallback onGetSubGroupGUIDsInGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUGroupNameDelegate;
        
        private EndOperationDelegate onEndGetRTUGroupNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUGroupNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsGroupEnableDelegate;
        
        private EndOperationDelegate onEndIsGroupEnableDelegate;
        
        private System.Threading.SendOrPostCallback onIsGroupEnableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRtuTagGUIDsDelegate;
        
        private EndOperationDelegate onEndGetRtuTagGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRtuTagGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRtuGroupTagGUIDsDelegate;
        
        private EndOperationDelegate onEndGetRtuGroupTagGUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRtuGroupTagGUIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUTagNameDelegate;
        
        private EndOperationDelegate onEndGetRTUTagNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUTagNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTUTagsValueDelegate;
        
        private EndOperationDelegate onEndGetRTUTagsValueDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTUTagsValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagsValueDelegate;
        
        private EndOperationDelegate onEndGetTagsValueDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagsValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeRTUTagsDelegate;
        
        private EndOperationDelegate onEndSubscribeRTUTagsDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeRTUTagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnscribeRTUTagsDelegate;
        
        private EndOperationDelegate onEndUnscribeRTUTagsDelegate;
        
        private System.Threading.SendOrPostCallback onUnscribeRTUTagsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSValueAsPartialByteBufferDelegate;
        
        private EndOperationDelegate onEndGetDSValueAsPartialByteBufferDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSValueAsPartialByteBufferCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSValueAsByteBufferDelegate;
        
        private EndOperationDelegate onEndGetDSValueAsByteBufferDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSValueAsByteBufferCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSOscByIdInBDDelegate;
        
        private EndOperationDelegate onEndGetDSOscByIdInBDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSOscByIdInBDCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetReq2ArhivInfoDelegate;
        
        private EndOperationDelegate onEndSetReq2ArhivInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSetReq2ArhivInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginRunCMDMOADelegate;
        
        private EndOperationDelegate onEndRunCMDMOADelegate;
        
        private System.Threading.SendOrPostCallback onRunCMDMOACompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSLastErrorsGUIDDelegate;
        
        private EndOperationDelegate onEndGetDSLastErrorsGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSLastErrorsGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSLastErrorGUIDDelegate;
        
        private EndOperationDelegate onEndGetDSLastErrorGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSLastErrorGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDSErrorTextByErrorGUIDDelegate;
        
        private EndOperationDelegate onEndGetDSErrorTextByErrorGUIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDSErrorTextByErrorGUIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcknowledgementOfErrorsDelegate;
        
        private EndOperationDelegate onEndAcknowledgementOfErrorsDelegate;
        
        private System.Threading.SendOrPostCallback onAcknowledgementOfErrorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterForErrorEventDelegate;
        
        private EndOperationDelegate onEndRegisterForErrorEventDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterForErrorEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTagValueFromHMIDelegate;
        
        private EndOperationDelegate onEndSetTagValueFromHMIDelegate;
        
        private System.Threading.SendOrPostCallback onSetTagValueFromHMICompletedDelegate;
        
        private BeginOperationDelegate onBeginReSetTagValueFromHMIDelegate;
        
        private EndOperationDelegate onEndReSetTagValueFromHMIDelegate;
        
        private System.Threading.SendOrPostCallback onReSetTagValueFromHMICompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagAnalogTransformationRatioDelegate;
        
        private EndOperationDelegate onEndGetTagAnalogTransformationRatioDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagAnalogTransformationRatioCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTagAnalogTransformationRatioDelegate;
        
        private EndOperationDelegate onEndSetTagAnalogTransformationRatioDelegate;
        
        private System.Threading.SendOrPostCallback onSetTagAnalogTransformationRatioCompletedDelegate;
        
        private BeginOperationDelegate onBeginReSetTagAnalogTransformationRatioDelegate;
        
        private EndOperationDelegate onEndReSetTagAnalogTransformationRatioDelegate;
        
        private System.Threading.SendOrPostCallback onReSetTagAnalogTransformationRatioCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsInverseDiscretTagDelegate;
        
        private EndOperationDelegate onEndIsInverseDiscretTagDelegate;
        
        private System.Threading.SendOrPostCallback onIsInverseDiscretTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginInverseDiscretTagDelegate;
        
        private EndOperationDelegate onEndInverseDiscretTagDelegate;
        
        private System.Threading.SendOrPostCallback onInverseDiscretTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthorizationDelegate;
        
        private EndOperationDelegate onEndAuthorizationDelegate;
        
        private System.Threading.SendOrPostCallback onAuthorizationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersListDelegate;
        
        private EndOperationDelegate onEndGetUsersListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserGroupsListDelegate;
        
        private EndOperationDelegate onEndGetUserGroupsListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserGroupsListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserGroupDelegate;
        
        private EndOperationDelegate onEndCreateUserGroupDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventsDelegate;
        
        private EndOperationDelegate onEndGetEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOscillogramByIDDelegate;
        
        private EndOperationDelegate onEndGetOscillogramByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetOscillogramByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoricalDataByIDDelegate;
        
        private EndOperationDelegate onEndGetHistoricalDataByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoricalDataByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsNotReceiptedEventsExistDelegate;
        
        private EndOperationDelegate onEndIsNotReceiptedEventsExistDelegate;
        
        private System.Threading.SendOrPostCallback onIsNotReceiptedEventsExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotReceiptedEventsDelegate;
        
        private EndOperationDelegate onEndGetNotReceiptedEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotReceiptedEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginReceiptEventsDelegate;
        
        private EndOperationDelegate onEndReceiptEventsDelegate;
        
        private System.Threading.SendOrPostCallback onReceiptEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginReceiptAllEventsDelegate;
        
        private EndOperationDelegate onEndReceiptAllEventsDelegate;
        
        private System.Threading.SendOrPostCallback onReceiptAllEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSettingsSetsListDelegate;
        
        private EndOperationDelegate onEndGetSettingsSetsListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSettingsSetsListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetValuesFromSettingsSetDelegate;
        
        private EndOperationDelegate onEndGetValuesFromSettingsSetDelegate;
        
        private System.Threading.SendOrPostCallback onGetValuesFromSettingsSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveSettingsToDeviceDelegate;
        
        private EndOperationDelegate onEndSaveSettingsToDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveSettingsToDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCommandRunDelegate;
        
        private EndOperationDelegate onEndCommandRunDelegate;
        
        private System.Threading.SendOrPostCallback onCommandRunCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentsListDelegate;
        
        private EndOperationDelegate onEndGetDocumentsListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentsListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentByIDDelegate;
        
        private EndOperationDelegate onEndGetDocumentByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileChunkDelegate;
        
        private EndOperationDelegate onEndUploadFileChunkDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUploadedFileDelegate;
        
        private EndOperationDelegate onEndSaveUploadedFileDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUploadedFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginTerminateUploadFileSessionDelegate;
        
        private EndOperationDelegate onEndTerminateUploadFileSessionDelegate;
        
        private System.Threading.SendOrPostCallback onTerminateUploadFileSessionCompletedDelegate;
        
        public WcfDataServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WcfDataServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WcfDataServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfDataServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfDataServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<RunCMDCompletedEventArgs> RunCMDCompleted;
        
        public event System.EventHandler<GetDSGUIDCompletedEventArgs> GetDSGUIDCompleted;
        
        public event System.EventHandler<GetDSINFOCompletedEventArgs> GetDSINFOCompleted;
        
        public event System.EventHandler<GetDSConfigFileCompletedEventArgs> GetDSConfigFileCompleted;
        
        public event System.EventHandler<GetSourceGUIDsCompletedEventArgs> GetSourceGUIDsCompleted;
        
        public event System.EventHandler<GetSourceNameCompletedEventArgs> GetSourceNameCompleted;
        
        public event System.EventHandler<GetECUGUIDsCompletedEventArgs> GetECUGUIDsCompleted;
        
        public event System.EventHandler<GetECUNameCompletedEventArgs> GetECUNameCompleted;
        
        public event System.EventHandler<GetSrcEcuRTUGUIDsCompletedEventArgs> GetSrcEcuRTUGUIDsCompleted;
        
        public event System.EventHandler<GetRTUGUIDsCompletedEventArgs> GetRTUGUIDsCompleted;
        
        public event System.EventHandler<GetRTUTypeNameCompletedEventArgs> GetRTUTypeNameCompleted;
        
        public event System.EventHandler<GetRTUDescriptionCompletedEventArgs> GetRTUDescriptionCompleted;
        
        public event System.EventHandler<IsRTUEnableCompletedEventArgs> IsRTUEnableCompleted;
        
        public event System.EventHandler<GetGroupGUIDsCompletedEventArgs> GetGroupGUIDsCompleted;
        
        public event System.EventHandler<GetSubGroupGUIDsInGroupCompletedEventArgs> GetSubGroupGUIDsInGroupCompleted;
        
        public event System.EventHandler<GetRTUGroupNameCompletedEventArgs> GetRTUGroupNameCompleted;
        
        public event System.EventHandler<IsGroupEnableCompletedEventArgs> IsGroupEnableCompleted;
        
        public event System.EventHandler<GetRtuTagGUIDsCompletedEventArgs> GetRtuTagGUIDsCompleted;
        
        public event System.EventHandler<GetRtuGroupTagGUIDsCompletedEventArgs> GetRtuGroupTagGUIDsCompleted;
        
        public event System.EventHandler<GetRTUTagNameCompletedEventArgs> GetRTUTagNameCompleted;
        
        public event System.EventHandler<GetRTUTagsValueCompletedEventArgs> GetRTUTagsValueCompleted;
        
        public event System.EventHandler<GetTagsValueCompletedEventArgs> GetTagsValueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeRTUTagsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnscribeRTUTagsCompleted;
        
        public event System.EventHandler<GetDSValueAsPartialByteBufferCompletedEventArgs> GetDSValueAsPartialByteBufferCompleted;
        
        public event System.EventHandler<GetDSValueAsByteBufferCompletedEventArgs> GetDSValueAsByteBufferCompleted;
        
        public event System.EventHandler<GetDSOscByIdInBDCompletedEventArgs> GetDSOscByIdInBDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetReq2ArhivInfoCompleted;
        
        public event System.EventHandler<RunCMDMOACompletedEventArgs> RunCMDMOACompleted;
        
        public event System.EventHandler<GetDSLastErrorsGUIDCompletedEventArgs> GetDSLastErrorsGUIDCompleted;
        
        public event System.EventHandler<GetDSLastErrorGUIDCompletedEventArgs> GetDSLastErrorGUIDCompleted;
        
        public event System.EventHandler<GetDSErrorTextByErrorGUIDCompletedEventArgs> GetDSErrorTextByErrorGUIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AcknowledgementOfErrorsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterForErrorEventCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetTagValueFromHMICompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReSetTagValueFromHMICompleted;
        
        public event System.EventHandler<GetTagAnalogTransformationRatioCompletedEventArgs> GetTagAnalogTransformationRatioCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetTagAnalogTransformationRatioCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReSetTagAnalogTransformationRatioCompleted;
        
        public event System.EventHandler<IsInverseDiscretTagCompletedEventArgs> IsInverseDiscretTagCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InverseDiscretTagCompleted;
        
        public event System.EventHandler<AuthorizationCompletedEventArgs> AuthorizationCompleted;
        
        public event System.EventHandler<GetUsersListCompletedEventArgs> GetUsersListCompleted;
        
        public event System.EventHandler<GetUserGroupsListCompletedEventArgs> GetUserGroupsListCompleted;
        
        public event System.EventHandler<CreateUserGroupCompletedEventArgs> CreateUserGroupCompleted;
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<GetEventsCompletedEventArgs> GetEventsCompleted;
        
        public event System.EventHandler<GetOscillogramByIDCompletedEventArgs> GetOscillogramByIDCompleted;
        
        public event System.EventHandler<GetHistoricalDataByIDCompletedEventArgs> GetHistoricalDataByIDCompleted;
        
        public event System.EventHandler<IsNotReceiptedEventsExistCompletedEventArgs> IsNotReceiptedEventsExistCompleted;
        
        public event System.EventHandler<GetNotReceiptedEventsCompletedEventArgs> GetNotReceiptedEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReceiptEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReceiptAllEventsCompleted;
        
        public event System.EventHandler<GetSettingsSetsListCompletedEventArgs> GetSettingsSetsListCompleted;
        
        public event System.EventHandler<GetValuesFromSettingsSetCompletedEventArgs> GetValuesFromSettingsSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveSettingsToDeviceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CommandRunCompleted;
        
        public event System.EventHandler<GetDocumentsListCompletedEventArgs> GetDocumentsListCompleted;
        
        public event System.EventHandler<GetDocumentByIDCompletedEventArgs> GetDocumentByIDCompleted;
        
        public event System.EventHandler<UploadFileChunkCompletedEventArgs> UploadFileChunkCompleted;
        
        public event System.EventHandler<SaveUploadedFileCompletedEventArgs> SaveUploadedFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TerminateUploadFileSessionCompleted;
        
        public bool RunCMD(ushort numksdu, uint numvtu, uint tagguid, byte[] arr) {
            return base.Channel.RunCMD(numksdu, numvtu, tagguid, arr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunCMD(ushort numksdu, uint numvtu, uint tagguid, byte[] arr, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunCMD(numksdu, numvtu, tagguid, arr, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRunCMD(System.IAsyncResult result) {
            return base.Channel.EndRunCMD(result);
        }
        
        private System.IAsyncResult OnBeginRunCMD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort numksdu = ((ushort)(inValues[0]));
            uint numvtu = ((uint)(inValues[1]));
            uint tagguid = ((uint)(inValues[2]));
            byte[] arr = ((byte[])(inValues[3]));
            return this.BeginRunCMD(numksdu, numvtu, tagguid, arr, callback, asyncState);
        }
        
        private object[] OnEndRunCMD(System.IAsyncResult result) {
            bool retVal = this.EndRunCMD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRunCMDCompleted(object state) {
            if ((this.RunCMDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunCMDCompleted(this, new RunCMDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunCMDAsync(ushort numksdu, uint numvtu, uint tagguid, byte[] arr) {
            this.RunCMDAsync(numksdu, numvtu, tagguid, arr, null);
        }
        
        public void RunCMDAsync(ushort numksdu, uint numvtu, uint tagguid, byte[] arr, object userState) {
            if ((this.onBeginRunCMDDelegate == null)) {
                this.onBeginRunCMDDelegate = new BeginOperationDelegate(this.OnBeginRunCMD);
            }
            if ((this.onEndRunCMDDelegate == null)) {
                this.onEndRunCMDDelegate = new EndOperationDelegate(this.OnEndRunCMD);
            }
            if ((this.onRunCMDCompletedDelegate == null)) {
                this.onRunCMDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunCMDCompleted);
            }
            base.InvokeAsync(this.onBeginRunCMDDelegate, new object[] {
                        numksdu,
                        numvtu,
                        tagguid,
                        arr}, this.onEndRunCMDDelegate, this.onRunCMDCompletedDelegate, userState);
        }
        
        public string GetDSGUID() {
            return base.Channel.GetDSGUID();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSGUID(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSGUID(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDSGUID(System.IAsyncResult result) {
            return base.Channel.EndGetDSGUID(result);
        }
        
        private System.IAsyncResult OnBeginGetDSGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDSGUID(callback, asyncState);
        }
        
        private object[] OnEndGetDSGUID(System.IAsyncResult result) {
            string retVal = this.EndGetDSGUID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSGUIDCompleted(object state) {
            if ((this.GetDSGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSGUIDCompleted(this, new GetDSGUIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSGUIDAsync() {
            this.GetDSGUIDAsync(null);
        }
        
        public void GetDSGUIDAsync(object userState) {
            if ((this.onBeginGetDSGUIDDelegate == null)) {
                this.onBeginGetDSGUIDDelegate = new BeginOperationDelegate(this.OnBeginGetDSGUID);
            }
            if ((this.onEndGetDSGUIDDelegate == null)) {
                this.onEndGetDSGUIDDelegate = new EndOperationDelegate(this.OnEndGetDSGUID);
            }
            if ((this.onGetDSGUIDCompletedDelegate == null)) {
                this.onGetDSGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSGUIDDelegate, null, this.onEndGetDSGUIDDelegate, this.onGetDSGUIDCompletedDelegate, userState);
        }
        
        public string GetDSINFO() {
            return base.Channel.GetDSINFO();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSINFO(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSINFO(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDSINFO(System.IAsyncResult result) {
            return base.Channel.EndGetDSINFO(result);
        }
        
        private System.IAsyncResult OnBeginGetDSINFO(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDSINFO(callback, asyncState);
        }
        
        private object[] OnEndGetDSINFO(System.IAsyncResult result) {
            string retVal = this.EndGetDSINFO(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSINFOCompleted(object state) {
            if ((this.GetDSINFOCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSINFOCompleted(this, new GetDSINFOCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSINFOAsync() {
            this.GetDSINFOAsync(null);
        }
        
        public void GetDSINFOAsync(object userState) {
            if ((this.onBeginGetDSINFODelegate == null)) {
                this.onBeginGetDSINFODelegate = new BeginOperationDelegate(this.OnBeginGetDSINFO);
            }
            if ((this.onEndGetDSINFODelegate == null)) {
                this.onEndGetDSINFODelegate = new EndOperationDelegate(this.OnEndGetDSINFO);
            }
            if ((this.onGetDSINFOCompletedDelegate == null)) {
                this.onGetDSINFOCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSINFOCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSINFODelegate, null, this.onEndGetDSINFODelegate, this.onGetDSINFOCompletedDelegate, userState);
        }
        
        public System.IO.Stream GetDSConfigFile() {
            return base.Channel.GetDSConfigFile();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSConfigFile(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSConfigFile(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndGetDSConfigFile(System.IAsyncResult result) {
            return base.Channel.EndGetDSConfigFile(result);
        }
        
        private System.IAsyncResult OnBeginGetDSConfigFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDSConfigFile(callback, asyncState);
        }
        
        private object[] OnEndGetDSConfigFile(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndGetDSConfigFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSConfigFileCompleted(object state) {
            if ((this.GetDSConfigFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSConfigFileCompleted(this, new GetDSConfigFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSConfigFileAsync() {
            this.GetDSConfigFileAsync(null);
        }
        
        public void GetDSConfigFileAsync(object userState) {
            if ((this.onBeginGetDSConfigFileDelegate == null)) {
                this.onBeginGetDSConfigFileDelegate = new BeginOperationDelegate(this.OnBeginGetDSConfigFile);
            }
            if ((this.onEndGetDSConfigFileDelegate == null)) {
                this.onEndGetDSConfigFileDelegate = new EndOperationDelegate(this.OnEndGetDSConfigFile);
            }
            if ((this.onGetDSConfigFileCompletedDelegate == null)) {
                this.onGetDSConfigFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSConfigFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSConfigFileDelegate, null, this.onEndGetDSConfigFileDelegate, this.onGetDSConfigFileCompletedDelegate, userState);
        }
        
        public string GetSourceGUIDs() {
            return base.Channel.GetSourceGUIDs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSourceGUIDs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceGUIDs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSourceGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetSourceGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSourceGUIDs(callback, asyncState);
        }
        
        private object[] OnEndGetSourceGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetSourceGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceGUIDsCompleted(object state) {
            if ((this.GetSourceGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceGUIDsCompleted(this, new GetSourceGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceGUIDsAsync() {
            this.GetSourceGUIDsAsync(null);
        }
        
        public void GetSourceGUIDsAsync(object userState) {
            if ((this.onBeginGetSourceGUIDsDelegate == null)) {
                this.onBeginGetSourceGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetSourceGUIDs);
            }
            if ((this.onEndGetSourceGUIDsDelegate == null)) {
                this.onEndGetSourceGUIDsDelegate = new EndOperationDelegate(this.OnEndGetSourceGUIDs);
            }
            if ((this.onGetSourceGUIDsCompletedDelegate == null)) {
                this.onGetSourceGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceGUIDsDelegate, null, this.onEndGetSourceGUIDsDelegate, this.onGetSourceGUIDsCompletedDelegate, userState);
        }
        
        public string GetSourceName(ushort SrcGuid) {
            return base.Channel.GetSourceName(SrcGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSourceName(ushort SrcGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSourceName(SrcGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSourceName(System.IAsyncResult result) {
            return base.Channel.EndGetSourceName(result);
        }
        
        private System.IAsyncResult OnBeginGetSourceName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort SrcGuid = ((ushort)(inValues[0]));
            return this.BeginGetSourceName(SrcGuid, callback, asyncState);
        }
        
        private object[] OnEndGetSourceName(System.IAsyncResult result) {
            string retVal = this.EndGetSourceName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSourceNameCompleted(object state) {
            if ((this.GetSourceNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSourceNameCompleted(this, new GetSourceNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSourceNameAsync(ushort SrcGuid) {
            this.GetSourceNameAsync(SrcGuid, null);
        }
        
        public void GetSourceNameAsync(ushort SrcGuid, object userState) {
            if ((this.onBeginGetSourceNameDelegate == null)) {
                this.onBeginGetSourceNameDelegate = new BeginOperationDelegate(this.OnBeginGetSourceName);
            }
            if ((this.onEndGetSourceNameDelegate == null)) {
                this.onEndGetSourceNameDelegate = new EndOperationDelegate(this.OnEndGetSourceName);
            }
            if ((this.onGetSourceNameCompletedDelegate == null)) {
                this.onGetSourceNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetSourceNameDelegate, new object[] {
                        SrcGuid}, this.onEndGetSourceNameDelegate, this.onGetSourceNameCompletedDelegate, userState);
        }
        
        public string GetECUGUIDs(ushort SrcGuid) {
            return base.Channel.GetECUGUIDs(SrcGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetECUGUIDs(ushort SrcGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetECUGUIDs(SrcGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetECUGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetECUGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetECUGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort SrcGuid = ((ushort)(inValues[0]));
            return this.BeginGetECUGUIDs(SrcGuid, callback, asyncState);
        }
        
        private object[] OnEndGetECUGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetECUGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetECUGUIDsCompleted(object state) {
            if ((this.GetECUGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetECUGUIDsCompleted(this, new GetECUGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetECUGUIDsAsync(ushort SrcGuid) {
            this.GetECUGUIDsAsync(SrcGuid, null);
        }
        
        public void GetECUGUIDsAsync(ushort SrcGuid, object userState) {
            if ((this.onBeginGetECUGUIDsDelegate == null)) {
                this.onBeginGetECUGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetECUGUIDs);
            }
            if ((this.onEndGetECUGUIDsDelegate == null)) {
                this.onEndGetECUGUIDsDelegate = new EndOperationDelegate(this.OnEndGetECUGUIDs);
            }
            if ((this.onGetECUGUIDsCompletedDelegate == null)) {
                this.onGetECUGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetECUGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetECUGUIDsDelegate, new object[] {
                        SrcGuid}, this.onEndGetECUGUIDsDelegate, this.onGetECUGUIDsCompletedDelegate, userState);
        }
        
        public string GetECUName(ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetECUName(SrcGuid, EcuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetECUName(ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetECUName(SrcGuid, EcuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetECUName(System.IAsyncResult result) {
            return base.Channel.EndGetECUName(result);
        }
        
        private System.IAsyncResult OnBeginGetECUName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort SrcGuid = ((ushort)(inValues[0]));
            ushort EcuGuid = ((ushort)(inValues[1]));
            return this.BeginGetECUName(SrcGuid, EcuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetECUName(System.IAsyncResult result) {
            string retVal = this.EndGetECUName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetECUNameCompleted(object state) {
            if ((this.GetECUNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetECUNameCompleted(this, new GetECUNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetECUNameAsync(ushort SrcGuid, ushort EcuGuid) {
            this.GetECUNameAsync(SrcGuid, EcuGuid, null);
        }
        
        public void GetECUNameAsync(ushort SrcGuid, ushort EcuGuid, object userState) {
            if ((this.onBeginGetECUNameDelegate == null)) {
                this.onBeginGetECUNameDelegate = new BeginOperationDelegate(this.OnBeginGetECUName);
            }
            if ((this.onEndGetECUNameDelegate == null)) {
                this.onEndGetECUNameDelegate = new EndOperationDelegate(this.OnEndGetECUName);
            }
            if ((this.onGetECUNameCompletedDelegate == null)) {
                this.onGetECUNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetECUNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetECUNameDelegate, new object[] {
                        SrcGuid,
                        EcuGuid}, this.onEndGetECUNameDelegate, this.onGetECUNameCompletedDelegate, userState);
        }
        
        public string GetSrcEcuRTUGUIDs(ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetSrcEcuRTUGUIDs(SrcGuid, EcuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSrcEcuRTUGUIDs(ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSrcEcuRTUGUIDs(SrcGuid, EcuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSrcEcuRTUGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetSrcEcuRTUGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetSrcEcuRTUGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort SrcGuid = ((ushort)(inValues[0]));
            ushort EcuGuid = ((ushort)(inValues[1]));
            return this.BeginGetSrcEcuRTUGUIDs(SrcGuid, EcuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetSrcEcuRTUGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetSrcEcuRTUGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSrcEcuRTUGUIDsCompleted(object state) {
            if ((this.GetSrcEcuRTUGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSrcEcuRTUGUIDsCompleted(this, new GetSrcEcuRTUGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSrcEcuRTUGUIDsAsync(ushort SrcGuid, ushort EcuGuid) {
            this.GetSrcEcuRTUGUIDsAsync(SrcGuid, EcuGuid, null);
        }
        
        public void GetSrcEcuRTUGUIDsAsync(ushort SrcGuid, ushort EcuGuid, object userState) {
            if ((this.onBeginGetSrcEcuRTUGUIDsDelegate == null)) {
                this.onBeginGetSrcEcuRTUGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetSrcEcuRTUGUIDs);
            }
            if ((this.onEndGetSrcEcuRTUGUIDsDelegate == null)) {
                this.onEndGetSrcEcuRTUGUIDsDelegate = new EndOperationDelegate(this.OnEndGetSrcEcuRTUGUIDs);
            }
            if ((this.onGetSrcEcuRTUGUIDsCompletedDelegate == null)) {
                this.onGetSrcEcuRTUGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSrcEcuRTUGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSrcEcuRTUGUIDsDelegate, new object[] {
                        SrcGuid,
                        EcuGuid}, this.onEndGetSrcEcuRTUGUIDsDelegate, this.onGetSrcEcuRTUGUIDsCompletedDelegate, userState);
        }
        
        public string GetRTUGUIDs() {
            return base.Channel.GetRTUGUIDs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUGUIDs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUGUIDs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRTUGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetRTUGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRTUGUIDs(callback, asyncState);
        }
        
        private object[] OnEndGetRTUGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetRTUGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUGUIDsCompleted(object state) {
            if ((this.GetRTUGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUGUIDsCompleted(this, new GetRTUGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUGUIDsAsync() {
            this.GetRTUGUIDsAsync(null);
        }
        
        public void GetRTUGUIDsAsync(object userState) {
            if ((this.onBeginGetRTUGUIDsDelegate == null)) {
                this.onBeginGetRTUGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetRTUGUIDs);
            }
            if ((this.onEndGetRTUGUIDsDelegate == null)) {
                this.onEndGetRTUGUIDsDelegate = new EndOperationDelegate(this.OnEndGetRTUGUIDs);
            }
            if ((this.onGetRTUGUIDsCompletedDelegate == null)) {
                this.onGetRTUGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUGUIDsDelegate, null, this.onEndGetRTUGUIDsDelegate, this.onGetRTUGUIDsCompletedDelegate, userState);
        }
        
        public string GetRTUTypeName(uint RtuGuid) {
            return base.Channel.GetRTUTypeName(RtuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUTypeName(uint RtuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUTypeName(RtuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRTUTypeName(System.IAsyncResult result) {
            return base.Channel.EndGetRTUTypeName(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUTypeName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            return this.BeginGetRTUTypeName(RtuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetRTUTypeName(System.IAsyncResult result) {
            string retVal = this.EndGetRTUTypeName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUTypeNameCompleted(object state) {
            if ((this.GetRTUTypeNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUTypeNameCompleted(this, new GetRTUTypeNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUTypeNameAsync(uint RtuGuid) {
            this.GetRTUTypeNameAsync(RtuGuid, null);
        }
        
        public void GetRTUTypeNameAsync(uint RtuGuid, object userState) {
            if ((this.onBeginGetRTUTypeNameDelegate == null)) {
                this.onBeginGetRTUTypeNameDelegate = new BeginOperationDelegate(this.OnBeginGetRTUTypeName);
            }
            if ((this.onEndGetRTUTypeNameDelegate == null)) {
                this.onEndGetRTUTypeNameDelegate = new EndOperationDelegate(this.OnEndGetRTUTypeName);
            }
            if ((this.onGetRTUTypeNameCompletedDelegate == null)) {
                this.onGetRTUTypeNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUTypeNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUTypeNameDelegate, new object[] {
                        RtuGuid}, this.onEndGetRTUTypeNameDelegate, this.onGetRTUTypeNameCompletedDelegate, userState);
        }
        
        public string GetRTUDescription(uint RtuGuid) {
            return base.Channel.GetRTUDescription(RtuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUDescription(uint RtuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUDescription(RtuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRTUDescription(System.IAsyncResult result) {
            return base.Channel.EndGetRTUDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            return this.BeginGetRTUDescription(RtuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetRTUDescription(System.IAsyncResult result) {
            string retVal = this.EndGetRTUDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUDescriptionCompleted(object state) {
            if ((this.GetRTUDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUDescriptionCompleted(this, new GetRTUDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUDescriptionAsync(uint RtuGuid) {
            this.GetRTUDescriptionAsync(RtuGuid, null);
        }
        
        public void GetRTUDescriptionAsync(uint RtuGuid, object userState) {
            if ((this.onBeginGetRTUDescriptionDelegate == null)) {
                this.onBeginGetRTUDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetRTUDescription);
            }
            if ((this.onEndGetRTUDescriptionDelegate == null)) {
                this.onEndGetRTUDescriptionDelegate = new EndOperationDelegate(this.OnEndGetRTUDescription);
            }
            if ((this.onGetRTUDescriptionCompletedDelegate == null)) {
                this.onGetRTUDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUDescriptionDelegate, new object[] {
                        RtuGuid}, this.onEndGetRTUDescriptionDelegate, this.onGetRTUDescriptionCompletedDelegate, userState);
        }
        
        public bool IsRTUEnable(uint RtuGuid) {
            return base.Channel.IsRTUEnable(RtuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsRTUEnable(uint RtuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsRTUEnable(RtuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsRTUEnable(System.IAsyncResult result) {
            return base.Channel.EndIsRTUEnable(result);
        }
        
        private System.IAsyncResult OnBeginIsRTUEnable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            return this.BeginIsRTUEnable(RtuGuid, callback, asyncState);
        }
        
        private object[] OnEndIsRTUEnable(System.IAsyncResult result) {
            bool retVal = this.EndIsRTUEnable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsRTUEnableCompleted(object state) {
            if ((this.IsRTUEnableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsRTUEnableCompleted(this, new IsRTUEnableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsRTUEnableAsync(uint RtuGuid) {
            this.IsRTUEnableAsync(RtuGuid, null);
        }
        
        public void IsRTUEnableAsync(uint RtuGuid, object userState) {
            if ((this.onBeginIsRTUEnableDelegate == null)) {
                this.onBeginIsRTUEnableDelegate = new BeginOperationDelegate(this.OnBeginIsRTUEnable);
            }
            if ((this.onEndIsRTUEnableDelegate == null)) {
                this.onEndIsRTUEnableDelegate = new EndOperationDelegate(this.OnEndIsRTUEnable);
            }
            if ((this.onIsRTUEnableCompletedDelegate == null)) {
                this.onIsRTUEnableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsRTUEnableCompleted);
            }
            base.InvokeAsync(this.onBeginIsRTUEnableDelegate, new object[] {
                        RtuGuid}, this.onEndIsRTUEnableDelegate, this.onIsRTUEnableCompletedDelegate, userState);
        }
        
        public string GetGroupGUIDs(uint RtuGuid) {
            return base.Channel.GetGroupGUIDs(RtuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupGUIDs(uint RtuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupGUIDs(RtuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetGroupGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetGroupGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            return this.BeginGetGroupGUIDs(RtuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetGroupGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetGroupGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupGUIDsCompleted(object state) {
            if ((this.GetGroupGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupGUIDsCompleted(this, new GetGroupGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupGUIDsAsync(uint RtuGuid) {
            this.GetGroupGUIDsAsync(RtuGuid, null);
        }
        
        public void GetGroupGUIDsAsync(uint RtuGuid, object userState) {
            if ((this.onBeginGetGroupGUIDsDelegate == null)) {
                this.onBeginGetGroupGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetGroupGUIDs);
            }
            if ((this.onEndGetGroupGUIDsDelegate == null)) {
                this.onEndGetGroupGUIDsDelegate = new EndOperationDelegate(this.OnEndGetGroupGUIDs);
            }
            if ((this.onGetGroupGUIDsCompletedDelegate == null)) {
                this.onGetGroupGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupGUIDsDelegate, new object[] {
                        RtuGuid}, this.onEndGetGroupGUIDsDelegate, this.onGetGroupGUIDsCompletedDelegate, userState);
        }
        
        public string GetSubGroupGUIDsInGroup(uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetSubGroupGUIDsInGroup(RtuGuid, GroupGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSubGroupGUIDsInGroup(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSubGroupGUIDsInGroup(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSubGroupGUIDsInGroup(System.IAsyncResult result) {
            return base.Channel.EndGetSubGroupGUIDsInGroup(result);
        }
        
        private System.IAsyncResult OnBeginGetSubGroupGUIDsInGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            uint GroupGuid = ((uint)(inValues[1]));
            return this.BeginGetSubGroupGUIDsInGroup(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        private object[] OnEndGetSubGroupGUIDsInGroup(System.IAsyncResult result) {
            string retVal = this.EndGetSubGroupGUIDsInGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSubGroupGUIDsInGroupCompleted(object state) {
            if ((this.GetSubGroupGUIDsInGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSubGroupGUIDsInGroupCompleted(this, new GetSubGroupGUIDsInGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSubGroupGUIDsInGroupAsync(uint RtuGuid, uint GroupGuid) {
            this.GetSubGroupGUIDsInGroupAsync(RtuGuid, GroupGuid, null);
        }
        
        public void GetSubGroupGUIDsInGroupAsync(uint RtuGuid, uint GroupGuid, object userState) {
            if ((this.onBeginGetSubGroupGUIDsInGroupDelegate == null)) {
                this.onBeginGetSubGroupGUIDsInGroupDelegate = new BeginOperationDelegate(this.OnBeginGetSubGroupGUIDsInGroup);
            }
            if ((this.onEndGetSubGroupGUIDsInGroupDelegate == null)) {
                this.onEndGetSubGroupGUIDsInGroupDelegate = new EndOperationDelegate(this.OnEndGetSubGroupGUIDsInGroup);
            }
            if ((this.onGetSubGroupGUIDsInGroupCompletedDelegate == null)) {
                this.onGetSubGroupGUIDsInGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSubGroupGUIDsInGroupCompleted);
            }
            base.InvokeAsync(this.onBeginGetSubGroupGUIDsInGroupDelegate, new object[] {
                        RtuGuid,
                        GroupGuid}, this.onEndGetSubGroupGUIDsInGroupDelegate, this.onGetSubGroupGUIDsInGroupCompletedDelegate, userState);
        }
        
        public string GetRTUGroupName(uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRTUGroupName(RtuGuid, GroupGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUGroupName(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUGroupName(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRTUGroupName(System.IAsyncResult result) {
            return base.Channel.EndGetRTUGroupName(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUGroupName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            uint GroupGuid = ((uint)(inValues[1]));
            return this.BeginGetRTUGroupName(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        private object[] OnEndGetRTUGroupName(System.IAsyncResult result) {
            string retVal = this.EndGetRTUGroupName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUGroupNameCompleted(object state) {
            if ((this.GetRTUGroupNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUGroupNameCompleted(this, new GetRTUGroupNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUGroupNameAsync(uint RtuGuid, uint GroupGuid) {
            this.GetRTUGroupNameAsync(RtuGuid, GroupGuid, null);
        }
        
        public void GetRTUGroupNameAsync(uint RtuGuid, uint GroupGuid, object userState) {
            if ((this.onBeginGetRTUGroupNameDelegate == null)) {
                this.onBeginGetRTUGroupNameDelegate = new BeginOperationDelegate(this.OnBeginGetRTUGroupName);
            }
            if ((this.onEndGetRTUGroupNameDelegate == null)) {
                this.onEndGetRTUGroupNameDelegate = new EndOperationDelegate(this.OnEndGetRTUGroupName);
            }
            if ((this.onGetRTUGroupNameCompletedDelegate == null)) {
                this.onGetRTUGroupNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUGroupNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUGroupNameDelegate, new object[] {
                        RtuGuid,
                        GroupGuid}, this.onEndGetRTUGroupNameDelegate, this.onGetRTUGroupNameCompletedDelegate, userState);
        }
        
        public bool IsGroupEnable(uint RtuGuid, uint GroupGuid) {
            return base.Channel.IsGroupEnable(RtuGuid, GroupGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsGroupEnable(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsGroupEnable(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsGroupEnable(System.IAsyncResult result) {
            return base.Channel.EndIsGroupEnable(result);
        }
        
        private System.IAsyncResult OnBeginIsGroupEnable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            uint GroupGuid = ((uint)(inValues[1]));
            return this.BeginIsGroupEnable(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        private object[] OnEndIsGroupEnable(System.IAsyncResult result) {
            bool retVal = this.EndIsGroupEnable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsGroupEnableCompleted(object state) {
            if ((this.IsGroupEnableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsGroupEnableCompleted(this, new IsGroupEnableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsGroupEnableAsync(uint RtuGuid, uint GroupGuid) {
            this.IsGroupEnableAsync(RtuGuid, GroupGuid, null);
        }
        
        public void IsGroupEnableAsync(uint RtuGuid, uint GroupGuid, object userState) {
            if ((this.onBeginIsGroupEnableDelegate == null)) {
                this.onBeginIsGroupEnableDelegate = new BeginOperationDelegate(this.OnBeginIsGroupEnable);
            }
            if ((this.onEndIsGroupEnableDelegate == null)) {
                this.onEndIsGroupEnableDelegate = new EndOperationDelegate(this.OnEndIsGroupEnable);
            }
            if ((this.onIsGroupEnableCompletedDelegate == null)) {
                this.onIsGroupEnableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsGroupEnableCompleted);
            }
            base.InvokeAsync(this.onBeginIsGroupEnableDelegate, new object[] {
                        RtuGuid,
                        GroupGuid}, this.onEndIsGroupEnableDelegate, this.onIsGroupEnableCompletedDelegate, userState);
        }
        
        public string GetRtuTagGUIDs(uint RtuGuid) {
            return base.Channel.GetRtuTagGUIDs(RtuGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRtuTagGUIDs(uint RtuGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRtuTagGUIDs(RtuGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRtuTagGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetRtuTagGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetRtuTagGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            return this.BeginGetRtuTagGUIDs(RtuGuid, callback, asyncState);
        }
        
        private object[] OnEndGetRtuTagGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetRtuTagGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRtuTagGUIDsCompleted(object state) {
            if ((this.GetRtuTagGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRtuTagGUIDsCompleted(this, new GetRtuTagGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRtuTagGUIDsAsync(uint RtuGuid) {
            this.GetRtuTagGUIDsAsync(RtuGuid, null);
        }
        
        public void GetRtuTagGUIDsAsync(uint RtuGuid, object userState) {
            if ((this.onBeginGetRtuTagGUIDsDelegate == null)) {
                this.onBeginGetRtuTagGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetRtuTagGUIDs);
            }
            if ((this.onEndGetRtuTagGUIDsDelegate == null)) {
                this.onEndGetRtuTagGUIDsDelegate = new EndOperationDelegate(this.OnEndGetRtuTagGUIDs);
            }
            if ((this.onGetRtuTagGUIDsCompletedDelegate == null)) {
                this.onGetRtuTagGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRtuTagGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRtuTagGUIDsDelegate, new object[] {
                        RtuGuid}, this.onEndGetRtuTagGUIDsDelegate, this.onGetRtuTagGUIDsCompletedDelegate, userState);
        }
        
        public string GetRtuGroupTagGUIDs(uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRtuGroupTagGUIDs(RtuGuid, GroupGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRtuGroupTagGUIDs(uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRtuGroupTagGUIDs(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRtuGroupTagGUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetRtuGroupTagGUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetRtuGroupTagGUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            uint GroupGuid = ((uint)(inValues[1]));
            return this.BeginGetRtuGroupTagGUIDs(RtuGuid, GroupGuid, callback, asyncState);
        }
        
        private object[] OnEndGetRtuGroupTagGUIDs(System.IAsyncResult result) {
            string retVal = this.EndGetRtuGroupTagGUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRtuGroupTagGUIDsCompleted(object state) {
            if ((this.GetRtuGroupTagGUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRtuGroupTagGUIDsCompleted(this, new GetRtuGroupTagGUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRtuGroupTagGUIDsAsync(uint RtuGuid, uint GroupGuid) {
            this.GetRtuGroupTagGUIDsAsync(RtuGuid, GroupGuid, null);
        }
        
        public void GetRtuGroupTagGUIDsAsync(uint RtuGuid, uint GroupGuid, object userState) {
            if ((this.onBeginGetRtuGroupTagGUIDsDelegate == null)) {
                this.onBeginGetRtuGroupTagGUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetRtuGroupTagGUIDs);
            }
            if ((this.onEndGetRtuGroupTagGUIDsDelegate == null)) {
                this.onEndGetRtuGroupTagGUIDsDelegate = new EndOperationDelegate(this.OnEndGetRtuGroupTagGUIDs);
            }
            if ((this.onGetRtuGroupTagGUIDsCompletedDelegate == null)) {
                this.onGetRtuGroupTagGUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRtuGroupTagGUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRtuGroupTagGUIDsDelegate, new object[] {
                        RtuGuid,
                        GroupGuid}, this.onEndGetRtuGroupTagGUIDsDelegate, this.onGetRtuGroupTagGUIDsCompletedDelegate, userState);
        }
        
        public string GetRTUTagName(uint RtuGuid, uint TagGUID) {
            return base.Channel.GetRTUTagName(RtuGuid, TagGUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUTagName(uint RtuGuid, uint TagGUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUTagName(RtuGuid, TagGUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRTUTagName(System.IAsyncResult result) {
            return base.Channel.EndGetRTUTagName(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUTagName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            uint TagGUID = ((uint)(inValues[1]));
            return this.BeginGetRTUTagName(RtuGuid, TagGUID, callback, asyncState);
        }
        
        private object[] OnEndGetRTUTagName(System.IAsyncResult result) {
            string retVal = this.EndGetRTUTagName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUTagNameCompleted(object state) {
            if ((this.GetRTUTagNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUTagNameCompleted(this, new GetRTUTagNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUTagNameAsync(uint RtuGuid, uint TagGUID) {
            this.GetRTUTagNameAsync(RtuGuid, TagGUID, null);
        }
        
        public void GetRTUTagNameAsync(uint RtuGuid, uint TagGUID, object userState) {
            if ((this.onBeginGetRTUTagNameDelegate == null)) {
                this.onBeginGetRTUTagNameDelegate = new BeginOperationDelegate(this.OnBeginGetRTUTagName);
            }
            if ((this.onEndGetRTUTagNameDelegate == null)) {
                this.onEndGetRTUTagNameDelegate = new EndOperationDelegate(this.OnEndGetRTUTagName);
            }
            if ((this.onGetRTUTagNameCompletedDelegate == null)) {
                this.onGetRTUTagNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUTagNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUTagNameDelegate, new object[] {
                        RtuGuid,
                        TagGUID}, this.onEndGetRTUTagNameDelegate, this.onGetRTUTagNameCompletedDelegate, userState);
        }
        
        public byte[] GetRTUTagsValue(uint RtuGuid, byte[] request) {
            return base.Channel.GetRTUTagsValue(RtuGuid, request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTUTagsValue(uint RtuGuid, byte[] request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTUTagsValue(RtuGuid, request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetRTUTagsValue(System.IAsyncResult result) {
            return base.Channel.EndGetRTUTagsValue(result);
        }
        
        private System.IAsyncResult OnBeginGetRTUTagsValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint RtuGuid = ((uint)(inValues[0]));
            byte[] request = ((byte[])(inValues[1]));
            return this.BeginGetRTUTagsValue(RtuGuid, request, callback, asyncState);
        }
        
        private object[] OnEndGetRTUTagsValue(System.IAsyncResult result) {
            byte[] retVal = this.EndGetRTUTagsValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTUTagsValueCompleted(object state) {
            if ((this.GetRTUTagsValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTUTagsValueCompleted(this, new GetRTUTagsValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTUTagsValueAsync(uint RtuGuid, byte[] request) {
            this.GetRTUTagsValueAsync(RtuGuid, request, null);
        }
        
        public void GetRTUTagsValueAsync(uint RtuGuid, byte[] request, object userState) {
            if ((this.onBeginGetRTUTagsValueDelegate == null)) {
                this.onBeginGetRTUTagsValueDelegate = new BeginOperationDelegate(this.OnBeginGetRTUTagsValue);
            }
            if ((this.onEndGetRTUTagsValueDelegate == null)) {
                this.onEndGetRTUTagsValueDelegate = new EndOperationDelegate(this.OnEndGetRTUTagsValue);
            }
            if ((this.onGetRTUTagsValueCompletedDelegate == null)) {
                this.onGetRTUTagsValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTUTagsValueCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTUTagsValueDelegate, new object[] {
                        RtuGuid,
                        request}, this.onEndGetRTUTagsValueDelegate, this.onGetRTUTagsValueCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetTagsValue(string[] request) {
            return base.Channel.GetTagsValue(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagsValue(string[] request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagsValue(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetTagsValue(System.IAsyncResult result) {
            return base.Channel.EndGetTagsValue(result);
        }
        
        private System.IAsyncResult OnBeginGetTagsValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] request = ((string[])(inValues[0]));
            return this.BeginGetTagsValue(request, callback, asyncState);
        }
        
        private object[] OnEndGetTagsValue(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> retVal = this.EndGetTagsValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagsValueCompleted(object state) {
            if ((this.GetTagsValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagsValueCompleted(this, new GetTagsValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagsValueAsync(string[] request) {
            this.GetTagsValueAsync(request, null);
        }
        
        public void GetTagsValueAsync(string[] request, object userState) {
            if ((this.onBeginGetTagsValueDelegate == null)) {
                this.onBeginGetTagsValueDelegate = new BeginOperationDelegate(this.OnBeginGetTagsValue);
            }
            if ((this.onEndGetTagsValueDelegate == null)) {
                this.onEndGetTagsValueDelegate = new EndOperationDelegate(this.OnEndGetTagsValue);
            }
            if ((this.onGetTagsValueCompletedDelegate == null)) {
                this.onGetTagsValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagsValueCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagsValueDelegate, new object[] {
                        request}, this.onEndGetTagsValueDelegate, this.onGetTagsValueCompletedDelegate, userState);
        }
        
        public void SubscribeRTUTags(string[] request) {
            base.Channel.SubscribeRTUTags(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribeRTUTags(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubscribeRTUTags(System.IAsyncResult result) {
            base.Channel.EndSubscribeRTUTags(result);
        }
        
        private System.IAsyncResult OnBeginSubscribeRTUTags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] request = ((string[])(inValues[0]));
            return this.BeginSubscribeRTUTags(request, callback, asyncState);
        }
        
        private object[] OnEndSubscribeRTUTags(System.IAsyncResult result) {
            this.EndSubscribeRTUTags(result);
            return null;
        }
        
        private void OnSubscribeRTUTagsCompleted(object state) {
            if ((this.SubscribeRTUTagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeRTUTagsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeRTUTagsAsync(string[] request) {
            this.SubscribeRTUTagsAsync(request, null);
        }
        
        public void SubscribeRTUTagsAsync(string[] request, object userState) {
            if ((this.onBeginSubscribeRTUTagsDelegate == null)) {
                this.onBeginSubscribeRTUTagsDelegate = new BeginOperationDelegate(this.OnBeginSubscribeRTUTags);
            }
            if ((this.onEndSubscribeRTUTagsDelegate == null)) {
                this.onEndSubscribeRTUTagsDelegate = new EndOperationDelegate(this.OnEndSubscribeRTUTags);
            }
            if ((this.onSubscribeRTUTagsCompletedDelegate == null)) {
                this.onSubscribeRTUTagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeRTUTagsCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeRTUTagsDelegate, new object[] {
                        request}, this.onEndSubscribeRTUTagsDelegate, this.onSubscribeRTUTagsCompletedDelegate, userState);
        }
        
        public void UnscribeRTUTags(string[] request) {
            base.Channel.UnscribeRTUTags(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnscribeRTUTags(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnscribeRTUTags(System.IAsyncResult result) {
            base.Channel.EndUnscribeRTUTags(result);
        }
        
        private System.IAsyncResult OnBeginUnscribeRTUTags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] request = ((string[])(inValues[0]));
            return this.BeginUnscribeRTUTags(request, callback, asyncState);
        }
        
        private object[] OnEndUnscribeRTUTags(System.IAsyncResult result) {
            this.EndUnscribeRTUTags(result);
            return null;
        }
        
        private void OnUnscribeRTUTagsCompleted(object state) {
            if ((this.UnscribeRTUTagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnscribeRTUTagsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnscribeRTUTagsAsync(string[] request) {
            this.UnscribeRTUTagsAsync(request, null);
        }
        
        public void UnscribeRTUTagsAsync(string[] request, object userState) {
            if ((this.onBeginUnscribeRTUTagsDelegate == null)) {
                this.onBeginUnscribeRTUTagsDelegate = new BeginOperationDelegate(this.OnBeginUnscribeRTUTags);
            }
            if ((this.onEndUnscribeRTUTagsDelegate == null)) {
                this.onEndUnscribeRTUTagsDelegate = new EndOperationDelegate(this.OnEndUnscribeRTUTags);
            }
            if ((this.onUnscribeRTUTagsCompletedDelegate == null)) {
                this.onUnscribeRTUTagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnscribeRTUTagsCompleted);
            }
            base.InvokeAsync(this.onBeginUnscribeRTUTagsDelegate, new object[] {
                        request}, this.onEndUnscribeRTUTagsDelegate, this.onUnscribeRTUTagsCompletedDelegate, userState);
        }
        
        public System.IO.MemoryStream GetDSValueAsPartialByteBuffer(byte[] arr, int currentNumberPacket, int packetCount) {
            return base.Channel.GetDSValueAsPartialByteBuffer(arr, currentNumberPacket, packetCount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSValueAsPartialByteBuffer(byte[] arr, int currentNumberPacket, int packetCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSValueAsPartialByteBuffer(arr, currentNumberPacket, packetCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.MemoryStream EndGetDSValueAsPartialByteBuffer(System.IAsyncResult result) {
            return base.Channel.EndGetDSValueAsPartialByteBuffer(result);
        }
        
        private System.IAsyncResult OnBeginGetDSValueAsPartialByteBuffer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] arr = ((byte[])(inValues[0]));
            int currentNumberPacket = ((int)(inValues[1]));
            int packetCount = ((int)(inValues[2]));
            return this.BeginGetDSValueAsPartialByteBuffer(arr, currentNumberPacket, packetCount, callback, asyncState);
        }
        
        private object[] OnEndGetDSValueAsPartialByteBuffer(System.IAsyncResult result) {
            System.IO.MemoryStream retVal = this.EndGetDSValueAsPartialByteBuffer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSValueAsPartialByteBufferCompleted(object state) {
            if ((this.GetDSValueAsPartialByteBufferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSValueAsPartialByteBufferCompleted(this, new GetDSValueAsPartialByteBufferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSValueAsPartialByteBufferAsync(byte[] arr, int currentNumberPacket, int packetCount) {
            this.GetDSValueAsPartialByteBufferAsync(arr, currentNumberPacket, packetCount, null);
        }
        
        public void GetDSValueAsPartialByteBufferAsync(byte[] arr, int currentNumberPacket, int packetCount, object userState) {
            if ((this.onBeginGetDSValueAsPartialByteBufferDelegate == null)) {
                this.onBeginGetDSValueAsPartialByteBufferDelegate = new BeginOperationDelegate(this.OnBeginGetDSValueAsPartialByteBuffer);
            }
            if ((this.onEndGetDSValueAsPartialByteBufferDelegate == null)) {
                this.onEndGetDSValueAsPartialByteBufferDelegate = new EndOperationDelegate(this.OnEndGetDSValueAsPartialByteBuffer);
            }
            if ((this.onGetDSValueAsPartialByteBufferCompletedDelegate == null)) {
                this.onGetDSValueAsPartialByteBufferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSValueAsPartialByteBufferCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSValueAsPartialByteBufferDelegate, new object[] {
                        arr,
                        currentNumberPacket,
                        packetCount}, this.onEndGetDSValueAsPartialByteBufferDelegate, this.onGetDSValueAsPartialByteBufferCompletedDelegate, userState);
        }
        
        public System.IO.MemoryStream GetDSValueAsByteBuffer(byte[] arr) {
            return base.Channel.GetDSValueAsByteBuffer(arr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSValueAsByteBuffer(byte[] arr, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSValueAsByteBuffer(arr, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.MemoryStream EndGetDSValueAsByteBuffer(System.IAsyncResult result) {
            return base.Channel.EndGetDSValueAsByteBuffer(result);
        }
        
        private System.IAsyncResult OnBeginGetDSValueAsByteBuffer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] arr = ((byte[])(inValues[0]));
            return this.BeginGetDSValueAsByteBuffer(arr, callback, asyncState);
        }
        
        private object[] OnEndGetDSValueAsByteBuffer(System.IAsyncResult result) {
            System.IO.MemoryStream retVal = this.EndGetDSValueAsByteBuffer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSValueAsByteBufferCompleted(object state) {
            if ((this.GetDSValueAsByteBufferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSValueAsByteBufferCompleted(this, new GetDSValueAsByteBufferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSValueAsByteBufferAsync(byte[] arr) {
            this.GetDSValueAsByteBufferAsync(arr, null);
        }
        
        public void GetDSValueAsByteBufferAsync(byte[] arr, object userState) {
            if ((this.onBeginGetDSValueAsByteBufferDelegate == null)) {
                this.onBeginGetDSValueAsByteBufferDelegate = new BeginOperationDelegate(this.OnBeginGetDSValueAsByteBuffer);
            }
            if ((this.onEndGetDSValueAsByteBufferDelegate == null)) {
                this.onEndGetDSValueAsByteBufferDelegate = new EndOperationDelegate(this.OnEndGetDSValueAsByteBuffer);
            }
            if ((this.onGetDSValueAsByteBufferCompletedDelegate == null)) {
                this.onGetDSValueAsByteBufferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSValueAsByteBufferCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSValueAsByteBufferDelegate, new object[] {
                        arr}, this.onEndGetDSValueAsByteBufferDelegate, this.onGetDSValueAsByteBufferCompletedDelegate, userState);
        }
        
        public System.IO.MemoryStream GetDSOscByIdInBD(byte[] pq) {
            return base.Channel.GetDSOscByIdInBD(pq);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSOscByIdInBD(byte[] pq, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSOscByIdInBD(pq, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.MemoryStream EndGetDSOscByIdInBD(System.IAsyncResult result) {
            return base.Channel.EndGetDSOscByIdInBD(result);
        }
        
        private System.IAsyncResult OnBeginGetDSOscByIdInBD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] pq = ((byte[])(inValues[0]));
            return this.BeginGetDSOscByIdInBD(pq, callback, asyncState);
        }
        
        private object[] OnEndGetDSOscByIdInBD(System.IAsyncResult result) {
            System.IO.MemoryStream retVal = this.EndGetDSOscByIdInBD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSOscByIdInBDCompleted(object state) {
            if ((this.GetDSOscByIdInBDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSOscByIdInBDCompleted(this, new GetDSOscByIdInBDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSOscByIdInBDAsync(byte[] pq) {
            this.GetDSOscByIdInBDAsync(pq, null);
        }
        
        public void GetDSOscByIdInBDAsync(byte[] pq, object userState) {
            if ((this.onBeginGetDSOscByIdInBDDelegate == null)) {
                this.onBeginGetDSOscByIdInBDDelegate = new BeginOperationDelegate(this.OnBeginGetDSOscByIdInBD);
            }
            if ((this.onEndGetDSOscByIdInBDDelegate == null)) {
                this.onEndGetDSOscByIdInBDDelegate = new EndOperationDelegate(this.OnEndGetDSOscByIdInBD);
            }
            if ((this.onGetDSOscByIdInBDCompletedDelegate == null)) {
                this.onGetDSOscByIdInBDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSOscByIdInBDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSOscByIdInBDDelegate, new object[] {
                        pq}, this.onEndGetDSOscByIdInBDDelegate, this.onGetDSOscByIdInBDCompletedDelegate, userState);
        }
        
        public void SetReq2ArhivInfo(byte[] pq) {
            base.Channel.SetReq2ArhivInfo(pq);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetReq2ArhivInfo(byte[] pq, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetReq2ArhivInfo(pq, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetReq2ArhivInfo(System.IAsyncResult result) {
            base.Channel.EndSetReq2ArhivInfo(result);
        }
        
        private System.IAsyncResult OnBeginSetReq2ArhivInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] pq = ((byte[])(inValues[0]));
            return this.BeginSetReq2ArhivInfo(pq, callback, asyncState);
        }
        
        private object[] OnEndSetReq2ArhivInfo(System.IAsyncResult result) {
            this.EndSetReq2ArhivInfo(result);
            return null;
        }
        
        private void OnSetReq2ArhivInfoCompleted(object state) {
            if ((this.SetReq2ArhivInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetReq2ArhivInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetReq2ArhivInfoAsync(byte[] pq) {
            this.SetReq2ArhivInfoAsync(pq, null);
        }
        
        public void SetReq2ArhivInfoAsync(byte[] pq, object userState) {
            if ((this.onBeginSetReq2ArhivInfoDelegate == null)) {
                this.onBeginSetReq2ArhivInfoDelegate = new BeginOperationDelegate(this.OnBeginSetReq2ArhivInfo);
            }
            if ((this.onEndSetReq2ArhivInfoDelegate == null)) {
                this.onEndSetReq2ArhivInfoDelegate = new EndOperationDelegate(this.OnEndSetReq2ArhivInfo);
            }
            if ((this.onSetReq2ArhivInfoCompletedDelegate == null)) {
                this.onSetReq2ArhivInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetReq2ArhivInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSetReq2ArhivInfoDelegate, new object[] {
                        pq}, this.onEndSetReq2ArhivInfoDelegate, this.onSetReq2ArhivInfoCompletedDelegate, userState);
        }
        
        public System.IO.MemoryStream RunCMDMOA(byte[] pq) {
            return base.Channel.RunCMDMOA(pq);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunCMDMOA(byte[] pq, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunCMDMOA(pq, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.MemoryStream EndRunCMDMOA(System.IAsyncResult result) {
            return base.Channel.EndRunCMDMOA(result);
        }
        
        private System.IAsyncResult OnBeginRunCMDMOA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] pq = ((byte[])(inValues[0]));
            return this.BeginRunCMDMOA(pq, callback, asyncState);
        }
        
        private object[] OnEndRunCMDMOA(System.IAsyncResult result) {
            System.IO.MemoryStream retVal = this.EndRunCMDMOA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRunCMDMOACompleted(object state) {
            if ((this.RunCMDMOACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunCMDMOACompleted(this, new RunCMDMOACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunCMDMOAAsync(byte[] pq) {
            this.RunCMDMOAAsync(pq, null);
        }
        
        public void RunCMDMOAAsync(byte[] pq, object userState) {
            if ((this.onBeginRunCMDMOADelegate == null)) {
                this.onBeginRunCMDMOADelegate = new BeginOperationDelegate(this.OnBeginRunCMDMOA);
            }
            if ((this.onEndRunCMDMOADelegate == null)) {
                this.onEndRunCMDMOADelegate = new EndOperationDelegate(this.OnEndRunCMDMOA);
            }
            if ((this.onRunCMDMOACompletedDelegate == null)) {
                this.onRunCMDMOACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunCMDMOACompleted);
            }
            base.InvokeAsync(this.onBeginRunCMDMOADelegate, new object[] {
                        pq}, this.onEndRunCMDMOADelegate, this.onRunCMDMOACompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.LstError GetDSLastErrorsGUID() {
            return base.Channel.GetDSLastErrorsGUID();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSLastErrorsGUID(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSLastErrorsGUID(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.LstError EndGetDSLastErrorsGUID(System.IAsyncResult result) {
            return base.Channel.EndGetDSLastErrorsGUID(result);
        }
        
        private System.IAsyncResult OnBeginGetDSLastErrorsGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDSLastErrorsGUID(callback, asyncState);
        }
        
        private object[] OnEndGetDSLastErrorsGUID(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.LstError retVal = this.EndGetDSLastErrorsGUID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSLastErrorsGUIDCompleted(object state) {
            if ((this.GetDSLastErrorsGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSLastErrorsGUIDCompleted(this, new GetDSLastErrorsGUIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSLastErrorsGUIDAsync() {
            this.GetDSLastErrorsGUIDAsync(null);
        }
        
        public void GetDSLastErrorsGUIDAsync(object userState) {
            if ((this.onBeginGetDSLastErrorsGUIDDelegate == null)) {
                this.onBeginGetDSLastErrorsGUIDDelegate = new BeginOperationDelegate(this.OnBeginGetDSLastErrorsGUID);
            }
            if ((this.onEndGetDSLastErrorsGUIDDelegate == null)) {
                this.onEndGetDSLastErrorsGUIDDelegate = new EndOperationDelegate(this.OnEndGetDSLastErrorsGUID);
            }
            if ((this.onGetDSLastErrorsGUIDCompletedDelegate == null)) {
                this.onGetDSLastErrorsGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSLastErrorsGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSLastErrorsGUIDDelegate, null, this.onEndGetDSLastErrorsGUIDDelegate, this.onGetDSLastErrorsGUIDCompletedDelegate, userState);
        }
        
        public string GetDSLastErrorGUID() {
            return base.Channel.GetDSLastErrorGUID();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSLastErrorGUID(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSLastErrorGUID(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDSLastErrorGUID(System.IAsyncResult result) {
            return base.Channel.EndGetDSLastErrorGUID(result);
        }
        
        private System.IAsyncResult OnBeginGetDSLastErrorGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDSLastErrorGUID(callback, asyncState);
        }
        
        private object[] OnEndGetDSLastErrorGUID(System.IAsyncResult result) {
            string retVal = this.EndGetDSLastErrorGUID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSLastErrorGUIDCompleted(object state) {
            if ((this.GetDSLastErrorGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSLastErrorGUIDCompleted(this, new GetDSLastErrorGUIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSLastErrorGUIDAsync() {
            this.GetDSLastErrorGUIDAsync(null);
        }
        
        public void GetDSLastErrorGUIDAsync(object userState) {
            if ((this.onBeginGetDSLastErrorGUIDDelegate == null)) {
                this.onBeginGetDSLastErrorGUIDDelegate = new BeginOperationDelegate(this.OnBeginGetDSLastErrorGUID);
            }
            if ((this.onEndGetDSLastErrorGUIDDelegate == null)) {
                this.onEndGetDSLastErrorGUIDDelegate = new EndOperationDelegate(this.OnEndGetDSLastErrorGUID);
            }
            if ((this.onGetDSLastErrorGUIDCompletedDelegate == null)) {
                this.onGetDSLastErrorGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSLastErrorGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSLastErrorGUIDDelegate, null, this.onEndGetDSLastErrorGUIDDelegate, this.onGetDSLastErrorGUIDCompletedDelegate, userState);
        }
        
        public string GetDSErrorTextByErrorGUID(string errorGUID) {
            return base.Channel.GetDSErrorTextByErrorGUID(errorGUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDSErrorTextByErrorGUID(string errorGUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDSErrorTextByErrorGUID(errorGUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDSErrorTextByErrorGUID(System.IAsyncResult result) {
            return base.Channel.EndGetDSErrorTextByErrorGUID(result);
        }
        
        private System.IAsyncResult OnBeginGetDSErrorTextByErrorGUID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string errorGUID = ((string)(inValues[0]));
            return this.BeginGetDSErrorTextByErrorGUID(errorGUID, callback, asyncState);
        }
        
        private object[] OnEndGetDSErrorTextByErrorGUID(System.IAsyncResult result) {
            string retVal = this.EndGetDSErrorTextByErrorGUID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDSErrorTextByErrorGUIDCompleted(object state) {
            if ((this.GetDSErrorTextByErrorGUIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDSErrorTextByErrorGUIDCompleted(this, new GetDSErrorTextByErrorGUIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDSErrorTextByErrorGUIDAsync(string errorGUID) {
            this.GetDSErrorTextByErrorGUIDAsync(errorGUID, null);
        }
        
        public void GetDSErrorTextByErrorGUIDAsync(string errorGUID, object userState) {
            if ((this.onBeginGetDSErrorTextByErrorGUIDDelegate == null)) {
                this.onBeginGetDSErrorTextByErrorGUIDDelegate = new BeginOperationDelegate(this.OnBeginGetDSErrorTextByErrorGUID);
            }
            if ((this.onEndGetDSErrorTextByErrorGUIDDelegate == null)) {
                this.onEndGetDSErrorTextByErrorGUIDDelegate = new EndOperationDelegate(this.OnEndGetDSErrorTextByErrorGUID);
            }
            if ((this.onGetDSErrorTextByErrorGUIDCompletedDelegate == null)) {
                this.onGetDSErrorTextByErrorGUIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDSErrorTextByErrorGUIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDSErrorTextByErrorGUIDDelegate, new object[] {
                        errorGUID}, this.onEndGetDSErrorTextByErrorGUIDDelegate, this.onGetDSErrorTextByErrorGUIDCompletedDelegate, userState);
        }
        
        public void AcknowledgementOfErrors() {
            base.Channel.AcknowledgementOfErrors();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAcknowledgementOfErrors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcknowledgementOfErrors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAcknowledgementOfErrors(System.IAsyncResult result) {
            base.Channel.EndAcknowledgementOfErrors(result);
        }
        
        private System.IAsyncResult OnBeginAcknowledgementOfErrors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginAcknowledgementOfErrors(callback, asyncState);
        }
        
        private object[] OnEndAcknowledgementOfErrors(System.IAsyncResult result) {
            this.EndAcknowledgementOfErrors(result);
            return null;
        }
        
        private void OnAcknowledgementOfErrorsCompleted(object state) {
            if ((this.AcknowledgementOfErrorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcknowledgementOfErrorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcknowledgementOfErrorsAsync() {
            this.AcknowledgementOfErrorsAsync(null);
        }
        
        public void AcknowledgementOfErrorsAsync(object userState) {
            if ((this.onBeginAcknowledgementOfErrorsDelegate == null)) {
                this.onBeginAcknowledgementOfErrorsDelegate = new BeginOperationDelegate(this.OnBeginAcknowledgementOfErrors);
            }
            if ((this.onEndAcknowledgementOfErrorsDelegate == null)) {
                this.onEndAcknowledgementOfErrorsDelegate = new EndOperationDelegate(this.OnEndAcknowledgementOfErrors);
            }
            if ((this.onAcknowledgementOfErrorsCompletedDelegate == null)) {
                this.onAcknowledgementOfErrorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcknowledgementOfErrorsCompleted);
            }
            base.InvokeAsync(this.onBeginAcknowledgementOfErrorsDelegate, null, this.onEndAcknowledgementOfErrorsDelegate, this.onAcknowledgementOfErrorsCompletedDelegate, userState);
        }
        
        public void RegisterForErrorEvent(string keyticker) {
            base.Channel.RegisterForErrorEvent(keyticker);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegisterForErrorEvent(string keyticker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterForErrorEvent(keyticker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRegisterForErrorEvent(System.IAsyncResult result) {
            base.Channel.EndRegisterForErrorEvent(result);
        }
        
        private System.IAsyncResult OnBeginRegisterForErrorEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyticker = ((string)(inValues[0]));
            return this.BeginRegisterForErrorEvent(keyticker, callback, asyncState);
        }
        
        private object[] OnEndRegisterForErrorEvent(System.IAsyncResult result) {
            this.EndRegisterForErrorEvent(result);
            return null;
        }
        
        private void OnRegisterForErrorEventCompleted(object state) {
            if ((this.RegisterForErrorEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterForErrorEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterForErrorEventAsync(string keyticker) {
            this.RegisterForErrorEventAsync(keyticker, null);
        }
        
        public void RegisterForErrorEventAsync(string keyticker, object userState) {
            if ((this.onBeginRegisterForErrorEventDelegate == null)) {
                this.onBeginRegisterForErrorEventDelegate = new BeginOperationDelegate(this.OnBeginRegisterForErrorEvent);
            }
            if ((this.onEndRegisterForErrorEventDelegate == null)) {
                this.onEndRegisterForErrorEventDelegate = new EndOperationDelegate(this.OnEndRegisterForErrorEvent);
            }
            if ((this.onRegisterForErrorEventCompletedDelegate == null)) {
                this.onRegisterForErrorEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterForErrorEventCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterForErrorEventDelegate, new object[] {
                        keyticker}, this.onEndRegisterForErrorEventDelegate, this.onRegisterForErrorEventCompletedDelegate, userState);
        }
        
        public void Ping() {
            base.Channel.Ping();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPing(System.IAsyncResult result) {
            base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            this.EndPing(result);
            return null;
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        public void SetTagValueFromHMI(string idTag, object valinobject) {
            base.Channel.SetTagValueFromHMI(idTag, valinobject);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTagValueFromHMI(string idTag, object valinobject, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTagValueFromHMI(idTag, valinobject, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetTagValueFromHMI(System.IAsyncResult result) {
            base.Channel.EndSetTagValueFromHMI(result);
        }
        
        private System.IAsyncResult OnBeginSetTagValueFromHMI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string idTag = ((string)(inValues[0]));
            object valinobject = ((object)(inValues[1]));
            return this.BeginSetTagValueFromHMI(idTag, valinobject, callback, asyncState);
        }
        
        private object[] OnEndSetTagValueFromHMI(System.IAsyncResult result) {
            this.EndSetTagValueFromHMI(result);
            return null;
        }
        
        private void OnSetTagValueFromHMICompleted(object state) {
            if ((this.SetTagValueFromHMICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTagValueFromHMICompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTagValueFromHMIAsync(string idTag, object valinobject) {
            this.SetTagValueFromHMIAsync(idTag, valinobject, null);
        }
        
        public void SetTagValueFromHMIAsync(string idTag, object valinobject, object userState) {
            if ((this.onBeginSetTagValueFromHMIDelegate == null)) {
                this.onBeginSetTagValueFromHMIDelegate = new BeginOperationDelegate(this.OnBeginSetTagValueFromHMI);
            }
            if ((this.onEndSetTagValueFromHMIDelegate == null)) {
                this.onEndSetTagValueFromHMIDelegate = new EndOperationDelegate(this.OnEndSetTagValueFromHMI);
            }
            if ((this.onSetTagValueFromHMICompletedDelegate == null)) {
                this.onSetTagValueFromHMICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTagValueFromHMICompleted);
            }
            base.InvokeAsync(this.onBeginSetTagValueFromHMIDelegate, new object[] {
                        idTag,
                        valinobject}, this.onEndSetTagValueFromHMIDelegate, this.onSetTagValueFromHMICompletedDelegate, userState);
        }
        
        public void ReSetTagValueFromHMI(string idTag) {
            base.Channel.ReSetTagValueFromHMI(idTag);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReSetTagValueFromHMI(string idTag, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReSetTagValueFromHMI(idTag, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReSetTagValueFromHMI(System.IAsyncResult result) {
            base.Channel.EndReSetTagValueFromHMI(result);
        }
        
        private System.IAsyncResult OnBeginReSetTagValueFromHMI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string idTag = ((string)(inValues[0]));
            return this.BeginReSetTagValueFromHMI(idTag, callback, asyncState);
        }
        
        private object[] OnEndReSetTagValueFromHMI(System.IAsyncResult result) {
            this.EndReSetTagValueFromHMI(result);
            return null;
        }
        
        private void OnReSetTagValueFromHMICompleted(object state) {
            if ((this.ReSetTagValueFromHMICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReSetTagValueFromHMICompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReSetTagValueFromHMIAsync(string idTag) {
            this.ReSetTagValueFromHMIAsync(idTag, null);
        }
        
        public void ReSetTagValueFromHMIAsync(string idTag, object userState) {
            if ((this.onBeginReSetTagValueFromHMIDelegate == null)) {
                this.onBeginReSetTagValueFromHMIDelegate = new BeginOperationDelegate(this.OnBeginReSetTagValueFromHMI);
            }
            if ((this.onEndReSetTagValueFromHMIDelegate == null)) {
                this.onEndReSetTagValueFromHMIDelegate = new EndOperationDelegate(this.OnEndReSetTagValueFromHMI);
            }
            if ((this.onReSetTagValueFromHMICompletedDelegate == null)) {
                this.onReSetTagValueFromHMICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReSetTagValueFromHMICompleted);
            }
            base.InvokeAsync(this.onBeginReSetTagValueFromHMIDelegate, new object[] {
                        idTag}, this.onEndReSetTagValueFromHMIDelegate, this.onReSetTagValueFromHMICompletedDelegate, userState);
        }
        
        public object GetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndGetTagAnalogTransformationRatio(System.IAsyncResult result) {
            return base.Channel.EndGetTagAnalogTransformationRatio(result);
        }
        
        private System.IAsyncResult OnBeginGetTagAnalogTransformationRatio(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort dsGuid = ((ushort)(inValues[0]));
            uint devGuid = ((uint)(inValues[1]));
            uint tagGuid = ((uint)(inValues[2]));
            return this.BeginGetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        private object[] OnEndGetTagAnalogTransformationRatio(System.IAsyncResult result) {
            object retVal = this.EndGetTagAnalogTransformationRatio(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagAnalogTransformationRatioCompleted(object state) {
            if ((this.GetTagAnalogTransformationRatioCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagAnalogTransformationRatioCompleted(this, new GetTagAnalogTransformationRatioCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            this.GetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid, null);
        }
        
        public void GetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object userState) {
            if ((this.onBeginGetTagAnalogTransformationRatioDelegate == null)) {
                this.onBeginGetTagAnalogTransformationRatioDelegate = new BeginOperationDelegate(this.OnBeginGetTagAnalogTransformationRatio);
            }
            if ((this.onEndGetTagAnalogTransformationRatioDelegate == null)) {
                this.onEndGetTagAnalogTransformationRatioDelegate = new EndOperationDelegate(this.OnEndGetTagAnalogTransformationRatio);
            }
            if ((this.onGetTagAnalogTransformationRatioCompletedDelegate == null)) {
                this.onGetTagAnalogTransformationRatioCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagAnalogTransformationRatioCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagAnalogTransformationRatioDelegate, new object[] {
                        dsGuid,
                        devGuid,
                        tagGuid}, this.onEndGetTagAnalogTransformationRatioDelegate, this.onGetTagAnalogTransformationRatioCompletedDelegate, userState);
        }
        
        public void SetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio) {
            base.Channel.SetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, transformationRatio);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, transformationRatio, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetTagAnalogTransformationRatio(System.IAsyncResult result) {
            base.Channel.EndSetTagAnalogTransformationRatio(result);
        }
        
        private System.IAsyncResult OnBeginSetTagAnalogTransformationRatio(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort dsGuid = ((ushort)(inValues[0]));
            uint devGuid = ((uint)(inValues[1]));
            uint tagGuid = ((uint)(inValues[2]));
            object transformationRatio = ((object)(inValues[3]));
            return this.BeginSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, transformationRatio, callback, asyncState);
        }
        
        private object[] OnEndSetTagAnalogTransformationRatio(System.IAsyncResult result) {
            this.EndSetTagAnalogTransformationRatio(result);
            return null;
        }
        
        private void OnSetTagAnalogTransformationRatioCompleted(object state) {
            if ((this.SetTagAnalogTransformationRatioCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTagAnalogTransformationRatioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio) {
            this.SetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid, transformationRatio, null);
        }
        
        public void SetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio, object userState) {
            if ((this.onBeginSetTagAnalogTransformationRatioDelegate == null)) {
                this.onBeginSetTagAnalogTransformationRatioDelegate = new BeginOperationDelegate(this.OnBeginSetTagAnalogTransformationRatio);
            }
            if ((this.onEndSetTagAnalogTransformationRatioDelegate == null)) {
                this.onEndSetTagAnalogTransformationRatioDelegate = new EndOperationDelegate(this.OnEndSetTagAnalogTransformationRatio);
            }
            if ((this.onSetTagAnalogTransformationRatioCompletedDelegate == null)) {
                this.onSetTagAnalogTransformationRatioCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTagAnalogTransformationRatioCompleted);
            }
            base.InvokeAsync(this.onBeginSetTagAnalogTransformationRatioDelegate, new object[] {
                        dsGuid,
                        devGuid,
                        tagGuid,
                        transformationRatio}, this.onEndSetTagAnalogTransformationRatioDelegate, this.onSetTagAnalogTransformationRatioCompletedDelegate, userState);
        }
        
        public void ReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid) {
            base.Channel.ReSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReSetTagAnalogTransformationRatio(System.IAsyncResult result) {
            base.Channel.EndReSetTagAnalogTransformationRatio(result);
        }
        
        private System.IAsyncResult OnBeginReSetTagAnalogTransformationRatio(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort dsGuid = ((ushort)(inValues[0]));
            uint devGuid = ((uint)(inValues[1]));
            uint tagGuid = ((uint)(inValues[2]));
            return this.BeginReSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        private object[] OnEndReSetTagAnalogTransformationRatio(System.IAsyncResult result) {
            this.EndReSetTagAnalogTransformationRatio(result);
            return null;
        }
        
        private void OnReSetTagAnalogTransformationRatioCompleted(object state) {
            if ((this.ReSetTagAnalogTransformationRatioCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReSetTagAnalogTransformationRatioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReSetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            this.ReSetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid, null);
        }
        
        public void ReSetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object userState) {
            if ((this.onBeginReSetTagAnalogTransformationRatioDelegate == null)) {
                this.onBeginReSetTagAnalogTransformationRatioDelegate = new BeginOperationDelegate(this.OnBeginReSetTagAnalogTransformationRatio);
            }
            if ((this.onEndReSetTagAnalogTransformationRatioDelegate == null)) {
                this.onEndReSetTagAnalogTransformationRatioDelegate = new EndOperationDelegate(this.OnEndReSetTagAnalogTransformationRatio);
            }
            if ((this.onReSetTagAnalogTransformationRatioCompletedDelegate == null)) {
                this.onReSetTagAnalogTransformationRatioCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReSetTagAnalogTransformationRatioCompleted);
            }
            base.InvokeAsync(this.onBeginReSetTagAnalogTransformationRatioDelegate, new object[] {
                        dsGuid,
                        devGuid,
                        tagGuid}, this.onEndReSetTagAnalogTransformationRatioDelegate, this.onReSetTagAnalogTransformationRatioCompletedDelegate, userState);
        }
        
        public bool IsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.IsInverseDiscretTag(dsGuid, devGuid, tagGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsInverseDiscretTag(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsInverseDiscretTag(System.IAsyncResult result) {
            return base.Channel.EndIsInverseDiscretTag(result);
        }
        
        private System.IAsyncResult OnBeginIsInverseDiscretTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort dsGuid = ((ushort)(inValues[0]));
            uint devGuid = ((uint)(inValues[1]));
            uint tagGuid = ((uint)(inValues[2]));
            return this.BeginIsInverseDiscretTag(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        private object[] OnEndIsInverseDiscretTag(System.IAsyncResult result) {
            bool retVal = this.EndIsInverseDiscretTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsInverseDiscretTagCompleted(object state) {
            if ((this.IsInverseDiscretTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsInverseDiscretTagCompleted(this, new IsInverseDiscretTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsInverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            this.IsInverseDiscretTagAsync(dsGuid, devGuid, tagGuid, null);
        }
        
        public void IsInverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid, object userState) {
            if ((this.onBeginIsInverseDiscretTagDelegate == null)) {
                this.onBeginIsInverseDiscretTagDelegate = new BeginOperationDelegate(this.OnBeginIsInverseDiscretTag);
            }
            if ((this.onEndIsInverseDiscretTagDelegate == null)) {
                this.onEndIsInverseDiscretTagDelegate = new EndOperationDelegate(this.OnEndIsInverseDiscretTag);
            }
            if ((this.onIsInverseDiscretTagCompletedDelegate == null)) {
                this.onIsInverseDiscretTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsInverseDiscretTagCompleted);
            }
            base.InvokeAsync(this.onBeginIsInverseDiscretTagDelegate, new object[] {
                        dsGuid,
                        devGuid,
                        tagGuid}, this.onEndIsInverseDiscretTagDelegate, this.onIsInverseDiscretTagCompletedDelegate, userState);
        }
        
        public void InverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid) {
            base.Channel.InverseDiscretTag(dsGuid, devGuid, tagGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInverseDiscretTag(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInverseDiscretTag(System.IAsyncResult result) {
            base.Channel.EndInverseDiscretTag(result);
        }
        
        private System.IAsyncResult OnBeginInverseDiscretTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ushort dsGuid = ((ushort)(inValues[0]));
            uint devGuid = ((uint)(inValues[1]));
            uint tagGuid = ((uint)(inValues[2]));
            return this.BeginInverseDiscretTag(dsGuid, devGuid, tagGuid, callback, asyncState);
        }
        
        private object[] OnEndInverseDiscretTag(System.IAsyncResult result) {
            this.EndInverseDiscretTag(result);
            return null;
        }
        
        private void OnInverseDiscretTagCompleted(object state) {
            if ((this.InverseDiscretTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InverseDiscretTagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            this.InverseDiscretTagAsync(dsGuid, devGuid, tagGuid, null);
        }
        
        public void InverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid, object userState) {
            if ((this.onBeginInverseDiscretTagDelegate == null)) {
                this.onBeginInverseDiscretTagDelegate = new BeginOperationDelegate(this.OnBeginInverseDiscretTag);
            }
            if ((this.onEndInverseDiscretTagDelegate == null)) {
                this.onEndInverseDiscretTagDelegate = new EndOperationDelegate(this.OnEndInverseDiscretTag);
            }
            if ((this.onInverseDiscretTagCompletedDelegate == null)) {
                this.onInverseDiscretTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInverseDiscretTagCompleted);
            }
            base.InvokeAsync(this.onBeginInverseDiscretTagDelegate, new object[] {
                        dsGuid,
                        devGuid,
                        tagGuid}, this.onEndInverseDiscretTagDelegate, this.onInverseDiscretTagCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSAuthResult Authorization(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            return base.Channel.Authorization(userName, userPassword, isFirstAuthorization, userSessionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthorization(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthorization(userName, userPassword, isFirstAuthorization, userSessionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSAuthResult EndAuthorization(System.IAsyncResult result) {
            return base.Channel.EndAuthorization(result);
        }
        
        private System.IAsyncResult OnBeginAuthorization(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            bool isFirstAuthorization = ((bool)(inValues[2]));
            DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo = ((DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo)(inValues[3]));
            return this.BeginAuthorization(userName, userPassword, isFirstAuthorization, userSessionInfo, callback, asyncState);
        }
        
        private object[] OnEndAuthorization(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSAuthResult retVal = this.EndAuthorization(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthorizationCompleted(object state) {
            if ((this.AuthorizationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthorizationCompleted(this, new AuthorizationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthorizationAsync(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            this.AuthorizationAsync(userName, userPassword, isFirstAuthorization, userSessionInfo, null);
        }
        
        public void AuthorizationAsync(string userName, string userPassword, bool isFirstAuthorization, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, object userState) {
            if ((this.onBeginAuthorizationDelegate == null)) {
                this.onBeginAuthorizationDelegate = new BeginOperationDelegate(this.OnBeginAuthorization);
            }
            if ((this.onEndAuthorizationDelegate == null)) {
                this.onEndAuthorizationDelegate = new EndOperationDelegate(this.OnEndAuthorization);
            }
            if ((this.onAuthorizationCompletedDelegate == null)) {
                this.onAuthorizationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthorizationCompleted);
            }
            base.InvokeAsync(this.onBeginAuthorizationDelegate, new object[] {
                        userName,
                        userPassword,
                        isFirstAuthorization,
                        userSessionInfo}, this.onEndAuthorizationDelegate, this.onAuthorizationCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSUser[] GetUsersList() {
            return base.Channel.GetUsersList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsersList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSUser[] EndGetUsersList(System.IAsyncResult result) {
            return base.Channel.EndGetUsersList(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetUsersList(callback, asyncState);
        }
        
        private object[] OnEndGetUsersList(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSUser[] retVal = this.EndGetUsersList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersListCompleted(object state) {
            if ((this.GetUsersListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersListCompleted(this, new GetUsersListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersListAsync() {
            this.GetUsersListAsync(null);
        }
        
        public void GetUsersListAsync(object userState) {
            if ((this.onBeginGetUsersListDelegate == null)) {
                this.onBeginGetUsersListDelegate = new BeginOperationDelegate(this.OnBeginGetUsersList);
            }
            if ((this.onEndGetUsersListDelegate == null)) {
                this.onEndGetUsersListDelegate = new EndOperationDelegate(this.OnEndGetUsersList);
            }
            if ((this.onGetUsersListCompletedDelegate == null)) {
                this.onGetUsersListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersListDelegate, null, this.onEndGetUsersListDelegate, this.onGetUsersListCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSUserGroup[] GetUserGroupsList() {
            return base.Channel.GetUserGroupsList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserGroupsList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserGroupsList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSUserGroup[] EndGetUserGroupsList(System.IAsyncResult result) {
            return base.Channel.EndGetUserGroupsList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserGroupsList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetUserGroupsList(callback, asyncState);
        }
        
        private object[] OnEndGetUserGroupsList(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSUserGroup[] retVal = this.EndGetUserGroupsList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserGroupsListCompleted(object state) {
            if ((this.GetUserGroupsListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserGroupsListCompleted(this, new GetUserGroupsListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserGroupsListAsync() {
            this.GetUserGroupsListAsync(null);
        }
        
        public void GetUserGroupsListAsync(object userState) {
            if ((this.onBeginGetUserGroupsListDelegate == null)) {
                this.onBeginGetUserGroupsListDelegate = new BeginOperationDelegate(this.OnBeginGetUserGroupsList);
            }
            if ((this.onEndGetUserGroupsListDelegate == null)) {
                this.onEndGetUserGroupsListDelegate = new EndOperationDelegate(this.OnEndGetUserGroupsList);
            }
            if ((this.onGetUserGroupsListCompletedDelegate == null)) {
                this.onGetUserGroupsListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserGroupsListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserGroupsListDelegate, null, this.onEndGetUserGroupsListDelegate, this.onGetUserGroupsListCompletedDelegate, userState);
        }
        
        public bool CreateUserGroup(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            return base.Channel.CreateUserGroup(groupName, groupComment, groupRight, userSessionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateUserGroup(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUserGroup(groupName, groupComment, groupRight, userSessionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCreateUserGroup(System.IAsyncResult result) {
            return base.Channel.EndCreateUserGroup(result);
        }
        
        private System.IAsyncResult OnBeginCreateUserGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string groupName = ((string)(inValues[0]));
            string groupComment = ((string)(inValues[1]));
            string groupRight = ((string)(inValues[2]));
            DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo = ((DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo)(inValues[3]));
            return this.BeginCreateUserGroup(groupName, groupComment, groupRight, userSessionInfo, callback, asyncState);
        }
        
        private object[] OnEndCreateUserGroup(System.IAsyncResult result) {
            bool retVal = this.EndCreateUserGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserGroupCompleted(object state) {
            if ((this.CreateUserGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserGroupCompleted(this, new CreateUserGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserGroupAsync(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            this.CreateUserGroupAsync(groupName, groupComment, groupRight, userSessionInfo, null);
        }
        
        public void CreateUserGroupAsync(string groupName, string groupComment, string groupRight, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, object userState) {
            if ((this.onBeginCreateUserGroupDelegate == null)) {
                this.onBeginCreateUserGroupDelegate = new BeginOperationDelegate(this.OnBeginCreateUserGroup);
            }
            if ((this.onEndCreateUserGroupDelegate == null)) {
                this.onEndCreateUserGroupDelegate = new EndOperationDelegate(this.OnEndCreateUserGroup);
            }
            if ((this.onCreateUserGroupCompletedDelegate == null)) {
                this.onCreateUserGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserGroupCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserGroupDelegate, new object[] {
                        groupName,
                        groupComment,
                        groupRight,
                        userSessionInfo}, this.onEndCreateUserGroupDelegate, this.onCreateUserGroupCompletedDelegate, userState);
        }
        
        public bool CreateUser(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            return base.Channel.CreateUser(userName, userPassword, userComment, userGroupID, userSessionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateUser(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(userName, userPassword, userComment, userGroupID, userSessionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCreateUser(System.IAsyncResult result) {
            return base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string userPassword = ((string)(inValues[1]));
            string userComment = ((string)(inValues[2]));
            int userGroupID = ((int)(inValues[3]));
            DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo = ((DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo)(inValues[4]));
            return this.BeginCreateUser(userName, userPassword, userComment, userGroupID, userSessionInfo, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            bool retVal = this.EndCreateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            this.CreateUserAsync(userName, userPassword, userComment, userGroupID, userSessionInfo, null);
        }
        
        public void CreateUserAsync(string userName, string userPassword, string userComment, int userGroupID, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        userName,
                        userPassword,
                        userComment,
                        userGroupID,
                        userSessionInfo}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] GetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList) {
            return base.Channel.GetEvents(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, devicesList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEvents(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, devicesList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] EndGetEvents(System.IAsyncResult result) {
            return base.Channel.EndGetEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateTimeFrom = ((System.DateTime)(inValues[0]));
            System.DateTime dateTimeTo = ((System.DateTime)(inValues[1]));
            bool needSystemEvents = ((bool)(inValues[2]));
            bool needUserEvents = ((bool)(inValues[3]));
            bool needTerminalEvents = ((bool)(inValues[4]));
            uint[] devicesList = ((uint[])(inValues[5]));
            return this.BeginGetEvents(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, devicesList, callback, asyncState);
        }
        
        private object[] OnEndGetEvents(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSEventValue[] retVal = this.EndGetEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventsCompleted(object state) {
            if ((this.GetEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsCompleted(this, new GetEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventsAsync(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList) {
            this.GetEventsAsync(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, devicesList, null);
        }
        
        public void GetEventsAsync(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, uint[] devicesList, object userState) {
            if ((this.onBeginGetEventsDelegate == null)) {
                this.onBeginGetEventsDelegate = new BeginOperationDelegate(this.OnBeginGetEvents);
            }
            if ((this.onEndGetEventsDelegate == null)) {
                this.onEndGetEventsDelegate = new EndOperationDelegate(this.OnEndGetEvents);
            }
            if ((this.onGetEventsCompletedDelegate == null)) {
                this.onGetEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsDelegate, new object[] {
                        dateTimeFrom,
                        dateTimeTo,
                        needSystemEvents,
                        needUserEvents,
                        needTerminalEvents,
                        devicesList}, this.onEndGetEventsDelegate, this.onGetEventsCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSOscillogram GetOscillogramByID(int eventDataID) {
            return base.Channel.GetOscillogramByID(eventDataID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOscillogramByID(int eventDataID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOscillogramByID(eventDataID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSOscillogram EndGetOscillogramByID(System.IAsyncResult result) {
            return base.Channel.EndGetOscillogramByID(result);
        }
        
        private System.IAsyncResult OnBeginGetOscillogramByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int eventDataID = ((int)(inValues[0]));
            return this.BeginGetOscillogramByID(eventDataID, callback, asyncState);
        }
        
        private object[] OnEndGetOscillogramByID(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSOscillogram retVal = this.EndGetOscillogramByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOscillogramByIDCompleted(object state) {
            if ((this.GetOscillogramByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOscillogramByIDCompleted(this, new GetOscillogramByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOscillogramByIDAsync(int eventDataID) {
            this.GetOscillogramByIDAsync(eventDataID, null);
        }
        
        public void GetOscillogramByIDAsync(int eventDataID, object userState) {
            if ((this.onBeginGetOscillogramByIDDelegate == null)) {
                this.onBeginGetOscillogramByIDDelegate = new BeginOperationDelegate(this.OnBeginGetOscillogramByID);
            }
            if ((this.onEndGetOscillogramByIDDelegate == null)) {
                this.onEndGetOscillogramByIDDelegate = new EndOperationDelegate(this.OnEndGetOscillogramByID);
            }
            if ((this.onGetOscillogramByIDCompletedDelegate == null)) {
                this.onGetOscillogramByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOscillogramByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetOscillogramByIDDelegate, new object[] {
                        eventDataID}, this.onEndGetOscillogramByIDDelegate, this.onGetOscillogramByIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetHistoricalDataByID(int dataID) {
            return base.Channel.GetHistoricalDataByID(dataID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetHistoricalDataByID(int dataID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistoricalDataByID(dataID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetHistoricalDataByID(System.IAsyncResult result) {
            return base.Channel.EndGetHistoricalDataByID(result);
        }
        
        private System.IAsyncResult OnBeginGetHistoricalDataByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataID = ((int)(inValues[0]));
            return this.BeginGetHistoricalDataByID(dataID, callback, asyncState);
        }
        
        private object[] OnEndGetHistoricalDataByID(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> retVal = this.EndGetHistoricalDataByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoricalDataByIDCompleted(object state) {
            if ((this.GetHistoricalDataByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoricalDataByIDCompleted(this, new GetHistoricalDataByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoricalDataByIDAsync(int dataID) {
            this.GetHistoricalDataByIDAsync(dataID, null);
        }
        
        public void GetHistoricalDataByIDAsync(int dataID, object userState) {
            if ((this.onBeginGetHistoricalDataByIDDelegate == null)) {
                this.onBeginGetHistoricalDataByIDDelegate = new BeginOperationDelegate(this.OnBeginGetHistoricalDataByID);
            }
            if ((this.onEndGetHistoricalDataByIDDelegate == null)) {
                this.onEndGetHistoricalDataByIDDelegate = new EndOperationDelegate(this.OnEndGetHistoricalDataByID);
            }
            if ((this.onGetHistoricalDataByIDCompletedDelegate == null)) {
                this.onGetHistoricalDataByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoricalDataByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoricalDataByIDDelegate, new object[] {
                        dataID}, this.onEndGetHistoricalDataByIDDelegate, this.onGetHistoricalDataByIDCompletedDelegate, userState);
        }
        
        public bool IsNotReceiptedEventsExist() {
            return base.Channel.IsNotReceiptedEventsExist();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsNotReceiptedEventsExist(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsNotReceiptedEventsExist(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsNotReceiptedEventsExist(System.IAsyncResult result) {
            return base.Channel.EndIsNotReceiptedEventsExist(result);
        }
        
        private System.IAsyncResult OnBeginIsNotReceiptedEventsExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIsNotReceiptedEventsExist(callback, asyncState);
        }
        
        private object[] OnEndIsNotReceiptedEventsExist(System.IAsyncResult result) {
            bool retVal = this.EndIsNotReceiptedEventsExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsNotReceiptedEventsExistCompleted(object state) {
            if ((this.IsNotReceiptedEventsExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsNotReceiptedEventsExistCompleted(this, new IsNotReceiptedEventsExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsNotReceiptedEventsExistAsync() {
            this.IsNotReceiptedEventsExistAsync(null);
        }
        
        public void IsNotReceiptedEventsExistAsync(object userState) {
            if ((this.onBeginIsNotReceiptedEventsExistDelegate == null)) {
                this.onBeginIsNotReceiptedEventsExistDelegate = new BeginOperationDelegate(this.OnBeginIsNotReceiptedEventsExist);
            }
            if ((this.onEndIsNotReceiptedEventsExistDelegate == null)) {
                this.onEndIsNotReceiptedEventsExistDelegate = new EndOperationDelegate(this.OnEndIsNotReceiptedEventsExist);
            }
            if ((this.onIsNotReceiptedEventsExistCompletedDelegate == null)) {
                this.onIsNotReceiptedEventsExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsNotReceiptedEventsExistCompleted);
            }
            base.InvokeAsync(this.onBeginIsNotReceiptedEventsExistDelegate, null, this.onEndIsNotReceiptedEventsExistDelegate, this.onIsNotReceiptedEventsExistCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] GetNotReceiptedEvents() {
            return base.Channel.GetNotReceiptedEvents();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNotReceiptedEvents(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotReceiptedEvents(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSEventValue[] EndGetNotReceiptedEvents(System.IAsyncResult result) {
            return base.Channel.EndGetNotReceiptedEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetNotReceiptedEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetNotReceiptedEvents(callback, asyncState);
        }
        
        private object[] OnEndGetNotReceiptedEvents(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSEventValue[] retVal = this.EndGetNotReceiptedEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotReceiptedEventsCompleted(object state) {
            if ((this.GetNotReceiptedEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotReceiptedEventsCompleted(this, new GetNotReceiptedEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotReceiptedEventsAsync() {
            this.GetNotReceiptedEventsAsync(null);
        }
        
        public void GetNotReceiptedEventsAsync(object userState) {
            if ((this.onBeginGetNotReceiptedEventsDelegate == null)) {
                this.onBeginGetNotReceiptedEventsDelegate = new BeginOperationDelegate(this.OnBeginGetNotReceiptedEvents);
            }
            if ((this.onEndGetNotReceiptedEventsDelegate == null)) {
                this.onEndGetNotReceiptedEventsDelegate = new EndOperationDelegate(this.OnEndGetNotReceiptedEvents);
            }
            if ((this.onGetNotReceiptedEventsCompletedDelegate == null)) {
                this.onGetNotReceiptedEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotReceiptedEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotReceiptedEventsDelegate, null, this.onEndGetNotReceiptedEventsDelegate, this.onGetNotReceiptedEventsCompletedDelegate, userState);
        }
        
        public void ReceiptEvents(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            base.Channel.ReceiptEvents(eventValuesId, userID, receiptComment, userSessionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReceiptEvents(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReceiptEvents(eventValuesId, userID, receiptComment, userSessionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReceiptEvents(System.IAsyncResult result) {
            base.Channel.EndReceiptEvents(result);
        }
        
        private System.IAsyncResult OnBeginReceiptEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int[] eventValuesId = ((int[])(inValues[0]));
            int userID = ((int)(inValues[1]));
            string receiptComment = ((string)(inValues[2]));
            DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo = ((DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo)(inValues[3]));
            return this.BeginReceiptEvents(eventValuesId, userID, receiptComment, userSessionInfo, callback, asyncState);
        }
        
        private object[] OnEndReceiptEvents(System.IAsyncResult result) {
            this.EndReceiptEvents(result);
            return null;
        }
        
        private void OnReceiptEventsCompleted(object state) {
            if ((this.ReceiptEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReceiptEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReceiptEventsAsync(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            this.ReceiptEventsAsync(eventValuesId, userID, receiptComment, userSessionInfo, null);
        }
        
        public void ReceiptEventsAsync(int[] eventValuesId, int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, object userState) {
            if ((this.onBeginReceiptEventsDelegate == null)) {
                this.onBeginReceiptEventsDelegate = new BeginOperationDelegate(this.OnBeginReceiptEvents);
            }
            if ((this.onEndReceiptEventsDelegate == null)) {
                this.onEndReceiptEventsDelegate = new EndOperationDelegate(this.OnEndReceiptEvents);
            }
            if ((this.onReceiptEventsCompletedDelegate == null)) {
                this.onReceiptEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReceiptEventsCompleted);
            }
            base.InvokeAsync(this.onBeginReceiptEventsDelegate, new object[] {
                        eventValuesId,
                        userID,
                        receiptComment,
                        userSessionInfo}, this.onEndReceiptEventsDelegate, this.onReceiptEventsCompletedDelegate, userState);
        }
        
        public void ReceiptAllEvents(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            base.Channel.ReceiptAllEvents(userID, receiptComment, userSessionInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReceiptAllEvents(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReceiptAllEvents(userID, receiptComment, userSessionInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReceiptAllEvents(System.IAsyncResult result) {
            base.Channel.EndReceiptAllEvents(result);
        }
        
        private System.IAsyncResult OnBeginReceiptAllEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string receiptComment = ((string)(inValues[1]));
            DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo = ((DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo)(inValues[2]));
            return this.BeginReceiptAllEvents(userID, receiptComment, userSessionInfo, callback, asyncState);
        }
        
        private object[] OnEndReceiptAllEvents(System.IAsyncResult result) {
            this.EndReceiptAllEvents(result);
            return null;
        }
        
        private void OnReceiptAllEventsCompleted(object state) {
            if ((this.ReceiptAllEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReceiptAllEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReceiptAllEventsAsync(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo) {
            this.ReceiptAllEventsAsync(userID, receiptComment, userSessionInfo, null);
        }
        
        public void ReceiptAllEventsAsync(int userID, string receiptComment, DSRouterServiceIIS.DSServiceReference.DSUserSessionInfo userSessionInfo, object userState) {
            if ((this.onBeginReceiptAllEventsDelegate == null)) {
                this.onBeginReceiptAllEventsDelegate = new BeginOperationDelegate(this.OnBeginReceiptAllEvents);
            }
            if ((this.onEndReceiptAllEventsDelegate == null)) {
                this.onEndReceiptAllEventsDelegate = new EndOperationDelegate(this.OnEndReceiptAllEvents);
            }
            if ((this.onReceiptAllEventsCompletedDelegate == null)) {
                this.onReceiptAllEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReceiptAllEventsCompleted);
            }
            base.InvokeAsync(this.onBeginReceiptAllEventsDelegate, new object[] {
                        userID,
                        receiptComment,
                        userSessionInfo}, this.onEndReceiptAllEventsDelegate, this.onReceiptAllEventsCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] GetSettingsSetsList(uint devGuid) {
            return base.Channel.GetSettingsSetsList(devGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSettingsSetsList(uint devGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSettingsSetsList(devGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] EndGetSettingsSetsList(System.IAsyncResult result) {
            return base.Channel.EndGetSettingsSetsList(result);
        }
        
        private System.IAsyncResult OnBeginGetSettingsSetsList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint devGuid = ((uint)(inValues[0]));
            return this.BeginGetSettingsSetsList(devGuid, callback, asyncState);
        }
        
        private object[] OnEndGetSettingsSetsList(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSSettingsSet[] retVal = this.EndGetSettingsSetsList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSettingsSetsListCompleted(object state) {
            if ((this.GetSettingsSetsListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSettingsSetsListCompleted(this, new GetSettingsSetsListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSettingsSetsListAsync(uint devGuid) {
            this.GetSettingsSetsListAsync(devGuid, null);
        }
        
        public void GetSettingsSetsListAsync(uint devGuid, object userState) {
            if ((this.onBeginGetSettingsSetsListDelegate == null)) {
                this.onBeginGetSettingsSetsListDelegate = new BeginOperationDelegate(this.OnBeginGetSettingsSetsList);
            }
            if ((this.onEndGetSettingsSetsListDelegate == null)) {
                this.onEndGetSettingsSetsListDelegate = new EndOperationDelegate(this.OnEndGetSettingsSetsList);
            }
            if ((this.onGetSettingsSetsListCompletedDelegate == null)) {
                this.onGetSettingsSetsListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSettingsSetsListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSettingsSetsListDelegate, new object[] {
                        devGuid}, this.onEndGetSettingsSetsListDelegate, this.onGetSettingsSetsListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> GetValuesFromSettingsSet(int settingsSetID, string[] tagsList) {
            return base.Channel.GetValuesFromSettingsSet(settingsSetID, tagsList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetValuesFromSettingsSet(int settingsSetID, string[] tagsList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetValuesFromSettingsSet(settingsSetID, tagsList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> EndGetValuesFromSettingsSet(System.IAsyncResult result) {
            return base.Channel.EndGetValuesFromSettingsSet(result);
        }
        
        private System.IAsyncResult OnBeginGetValuesFromSettingsSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int settingsSetID = ((int)(inValues[0]));
            string[] tagsList = ((string[])(inValues[1]));
            return this.BeginGetValuesFromSettingsSet(settingsSetID, tagsList, callback, asyncState);
        }
        
        private object[] OnEndGetValuesFromSettingsSet(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> retVal = this.EndGetValuesFromSettingsSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetValuesFromSettingsSetCompleted(object state) {
            if ((this.GetValuesFromSettingsSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetValuesFromSettingsSetCompleted(this, new GetValuesFromSettingsSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetValuesFromSettingsSetAsync(int settingsSetID, string[] tagsList) {
            this.GetValuesFromSettingsSetAsync(settingsSetID, tagsList, null);
        }
        
        public void GetValuesFromSettingsSetAsync(int settingsSetID, string[] tagsList, object userState) {
            if ((this.onBeginGetValuesFromSettingsSetDelegate == null)) {
                this.onBeginGetValuesFromSettingsSetDelegate = new BeginOperationDelegate(this.OnBeginGetValuesFromSettingsSet);
            }
            if ((this.onEndGetValuesFromSettingsSetDelegate == null)) {
                this.onEndGetValuesFromSettingsSetDelegate = new EndOperationDelegate(this.OnEndGetValuesFromSettingsSet);
            }
            if ((this.onGetValuesFromSettingsSetCompletedDelegate == null)) {
                this.onGetValuesFromSettingsSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValuesFromSettingsSetCompleted);
            }
            base.InvokeAsync(this.onBeginGetValuesFromSettingsSetDelegate, new object[] {
                        settingsSetID,
                        tagsList}, this.onEndGetValuesFromSettingsSetDelegate, this.onGetValuesFromSettingsSetCompletedDelegate, userState);
        }
        
        public void SaveSettingsToDevice(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues) {
            base.Channel.SaveSettingsToDevice(devGuid, tagsValues);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveSettingsToDevice(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveSettingsToDevice(devGuid, tagsValues, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveSettingsToDevice(System.IAsyncResult result) {
            base.Channel.EndSaveSettingsToDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveSettingsToDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint devGuid = ((uint)(inValues[0]));
            System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues = ((System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue>)(inValues[1]));
            return this.BeginSaveSettingsToDevice(devGuid, tagsValues, callback, asyncState);
        }
        
        private object[] OnEndSaveSettingsToDevice(System.IAsyncResult result) {
            this.EndSaveSettingsToDevice(result);
            return null;
        }
        
        private void OnSaveSettingsToDeviceCompleted(object state) {
            if ((this.SaveSettingsToDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveSettingsToDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveSettingsToDeviceAsync(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues) {
            this.SaveSettingsToDeviceAsync(devGuid, tagsValues, null);
        }
        
        public void SaveSettingsToDeviceAsync(uint devGuid, System.Collections.Generic.Dictionary<string, DSRouterServiceIIS.DSServiceReference.DSTagValue> tagsValues, object userState) {
            if ((this.onBeginSaveSettingsToDeviceDelegate == null)) {
                this.onBeginSaveSettingsToDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveSettingsToDevice);
            }
            if ((this.onEndSaveSettingsToDeviceDelegate == null)) {
                this.onEndSaveSettingsToDeviceDelegate = new EndOperationDelegate(this.OnEndSaveSettingsToDevice);
            }
            if ((this.onSaveSettingsToDeviceCompletedDelegate == null)) {
                this.onSaveSettingsToDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveSettingsToDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveSettingsToDeviceDelegate, new object[] {
                        devGuid,
                        tagsValues}, this.onEndSaveSettingsToDeviceDelegate, this.onSaveSettingsToDeviceCompletedDelegate, userState);
        }
        
        public void CommandRun(uint devGuid, string commandID, object[] parameters) {
            base.Channel.CommandRun(devGuid, commandID, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCommandRun(uint devGuid, string commandID, object[] parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCommandRun(devGuid, commandID, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCommandRun(System.IAsyncResult result) {
            base.Channel.EndCommandRun(result);
        }
        
        private System.IAsyncResult OnBeginCommandRun(object[] inValues, System.AsyncCallback callback, object asyncState) {
            uint devGuid = ((uint)(inValues[0]));
            string commandID = ((string)(inValues[1]));
            object[] parameters = ((object[])(inValues[2]));
            return this.BeginCommandRun(devGuid, commandID, parameters, callback, asyncState);
        }
        
        private object[] OnEndCommandRun(System.IAsyncResult result) {
            this.EndCommandRun(result);
            return null;
        }
        
        private void OnCommandRunCompleted(object state) {
            if ((this.CommandRunCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CommandRunCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CommandRunAsync(uint devGuid, string commandID, object[] parameters) {
            this.CommandRunAsync(devGuid, commandID, parameters, null);
        }
        
        public void CommandRunAsync(uint devGuid, string commandID, object[] parameters, object userState) {
            if ((this.onBeginCommandRunDelegate == null)) {
                this.onBeginCommandRunDelegate = new BeginOperationDelegate(this.OnBeginCommandRun);
            }
            if ((this.onEndCommandRunDelegate == null)) {
                this.onEndCommandRunDelegate = new EndOperationDelegate(this.OnEndCommandRun);
            }
            if ((this.onCommandRunCompletedDelegate == null)) {
                this.onCommandRunCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCommandRunCompleted);
            }
            base.InvokeAsync(this.onBeginCommandRunDelegate, new object[] {
                        devGuid,
                        commandID,
                        parameters}, this.onEndCommandRunDelegate, this.onCommandRunCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] GetDocumentsList(int devGuid) {
            return base.Channel.GetDocumentsList(devGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentsList(int devGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentsList(devGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] EndGetDocumentsList(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentsList(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentsList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int devGuid = ((int)(inValues[0]));
            return this.BeginGetDocumentsList(devGuid, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentsList(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSDocumentDataValue[] retVal = this.EndGetDocumentsList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentsListCompleted(object state) {
            if ((this.GetDocumentsListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentsListCompleted(this, new GetDocumentsListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentsListAsync(int devGuid) {
            this.GetDocumentsListAsync(devGuid, null);
        }
        
        public void GetDocumentsListAsync(int devGuid, object userState) {
            if ((this.onBeginGetDocumentsListDelegate == null)) {
                this.onBeginGetDocumentsListDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentsList);
            }
            if ((this.onEndGetDocumentsListDelegate == null)) {
                this.onEndGetDocumentsListDelegate = new EndOperationDelegate(this.OnEndGetDocumentsList);
            }
            if ((this.onGetDocumentsListCompletedDelegate == null)) {
                this.onGetDocumentsListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentsListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentsListDelegate, new object[] {
                        devGuid}, this.onEndGetDocumentsListDelegate, this.onGetDocumentsListCompletedDelegate, userState);
        }
        
        public DSRouterServiceIIS.DSServiceReference.DSDataFile GetDocumentByID(int documentId) {
            return base.Channel.GetDocumentByID(documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentByID(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentByID(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DSRouterServiceIIS.DSServiceReference.DSDataFile EndGetDocumentByID(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentByID(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return this.BeginGetDocumentByID(documentId, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentByID(System.IAsyncResult result) {
            DSRouterServiceIIS.DSServiceReference.DSDataFile retVal = this.EndGetDocumentByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentByIDCompleted(object state) {
            if ((this.GetDocumentByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentByIDCompleted(this, new GetDocumentByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentByIDAsync(int documentId) {
            this.GetDocumentByIDAsync(documentId, null);
        }
        
        public void GetDocumentByIDAsync(int documentId, object userState) {
            if ((this.onBeginGetDocumentByIDDelegate == null)) {
                this.onBeginGetDocumentByIDDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentByID);
            }
            if ((this.onEndGetDocumentByIDDelegate == null)) {
                this.onEndGetDocumentByIDDelegate = new EndOperationDelegate(this.OnEndGetDocumentByID);
            }
            if ((this.onGetDocumentByIDCompletedDelegate == null)) {
                this.onGetDocumentByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentByIDDelegate, new object[] {
                        documentId}, this.onEndGetDocumentByIDDelegate, this.onGetDocumentByIDCompletedDelegate, userState);
        }
        
        public bool UploadFileChunk(byte[] fileChunk) {
            return base.Channel.UploadFileChunk(fileChunk);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadFileChunk(byte[] fileChunk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFileChunk(fileChunk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUploadFileChunk(System.IAsyncResult result) {
            return base.Channel.EndUploadFileChunk(result);
        }
        
        private System.IAsyncResult OnBeginUploadFileChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] fileChunk = ((byte[])(inValues[0]));
            return this.BeginUploadFileChunk(fileChunk, callback, asyncState);
        }
        
        private object[] OnEndUploadFileChunk(System.IAsyncResult result) {
            bool retVal = this.EndUploadFileChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFileChunkCompleted(object state) {
            if ((this.UploadFileChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileChunkCompleted(this, new UploadFileChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileChunkAsync(byte[] fileChunk) {
            this.UploadFileChunkAsync(fileChunk, null);
        }
        
        public void UploadFileChunkAsync(byte[] fileChunk, object userState) {
            if ((this.onBeginUploadFileChunkDelegate == null)) {
                this.onBeginUploadFileChunkDelegate = new BeginOperationDelegate(this.OnBeginUploadFileChunk);
            }
            if ((this.onEndUploadFileChunkDelegate == null)) {
                this.onEndUploadFileChunkDelegate = new EndOperationDelegate(this.OnEndUploadFileChunk);
            }
            if ((this.onUploadFileChunkCompletedDelegate == null)) {
                this.onUploadFileChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileChunkCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileChunkDelegate, new object[] {
                        fileChunk}, this.onEndUploadFileChunkDelegate, this.onUploadFileChunkCompletedDelegate, userState);
        }
        
        public bool SaveUploadedFile(int devGuid, int userId, string fileName, string fileComment) {
            return base.Channel.SaveUploadedFile(devGuid, userId, fileName, fileComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUploadedFile(int devGuid, int userId, string fileName, string fileComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUploadedFile(devGuid, userId, fileName, fileComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveUploadedFile(System.IAsyncResult result) {
            return base.Channel.EndSaveUploadedFile(result);
        }
        
        private System.IAsyncResult OnBeginSaveUploadedFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int devGuid = ((int)(inValues[0]));
            int userId = ((int)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            string fileComment = ((string)(inValues[3]));
            return this.BeginSaveUploadedFile(devGuid, userId, fileName, fileComment, callback, asyncState);
        }
        
        private object[] OnEndSaveUploadedFile(System.IAsyncResult result) {
            bool retVal = this.EndSaveUploadedFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUploadedFileCompleted(object state) {
            if ((this.SaveUploadedFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUploadedFileCompleted(this, new SaveUploadedFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUploadedFileAsync(int devGuid, int userId, string fileName, string fileComment) {
            this.SaveUploadedFileAsync(devGuid, userId, fileName, fileComment, null);
        }
        
        public void SaveUploadedFileAsync(int devGuid, int userId, string fileName, string fileComment, object userState) {
            if ((this.onBeginSaveUploadedFileDelegate == null)) {
                this.onBeginSaveUploadedFileDelegate = new BeginOperationDelegate(this.OnBeginSaveUploadedFile);
            }
            if ((this.onEndSaveUploadedFileDelegate == null)) {
                this.onEndSaveUploadedFileDelegate = new EndOperationDelegate(this.OnEndSaveUploadedFile);
            }
            if ((this.onSaveUploadedFileCompletedDelegate == null)) {
                this.onSaveUploadedFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUploadedFileCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUploadedFileDelegate, new object[] {
                        devGuid,
                        userId,
                        fileName,
                        fileComment}, this.onEndSaveUploadedFileDelegate, this.onSaveUploadedFileCompletedDelegate, userState);
        }
        
        public void TerminateUploadFileSession() {
            base.Channel.TerminateUploadFileSession();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTerminateUploadFileSession(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTerminateUploadFileSession(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTerminateUploadFileSession(System.IAsyncResult result) {
            base.Channel.EndTerminateUploadFileSession(result);
        }
        
        private System.IAsyncResult OnBeginTerminateUploadFileSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTerminateUploadFileSession(callback, asyncState);
        }
        
        private object[] OnEndTerminateUploadFileSession(System.IAsyncResult result) {
            this.EndTerminateUploadFileSession(result);
            return null;
        }
        
        private void OnTerminateUploadFileSessionCompleted(object state) {
            if ((this.TerminateUploadFileSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TerminateUploadFileSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TerminateUploadFileSessionAsync() {
            this.TerminateUploadFileSessionAsync(null);
        }
        
        public void TerminateUploadFileSessionAsync(object userState) {
            if ((this.onBeginTerminateUploadFileSessionDelegate == null)) {
                this.onBeginTerminateUploadFileSessionDelegate = new BeginOperationDelegate(this.OnBeginTerminateUploadFileSession);
            }
            if ((this.onEndTerminateUploadFileSessionDelegate == null)) {
                this.onEndTerminateUploadFileSessionDelegate = new EndOperationDelegate(this.OnEndTerminateUploadFileSession);
            }
            if ((this.onTerminateUploadFileSessionCompletedDelegate == null)) {
                this.onTerminateUploadFileSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTerminateUploadFileSessionCompleted);
            }
            base.InvokeAsync(this.onBeginTerminateUploadFileSessionDelegate, null, this.onEndTerminateUploadFileSessionDelegate, this.onTerminateUploadFileSessionCompletedDelegate, userState);
        }
    }
}
